[
  {
    "patternId": "Migration_DepartmentName",
    "title": "Check that cop names in rubocop:disable (etc) comments are given with department name.",
    "description": "Check that cop names in rubocop:disable (etc) comments are given with department name.",
    "timeToFix": 5
  },
  {
    "patternId": "Bundler_DuplicatedGem",
    "title": "Checks for duplicate gem entries in Gemfile.",
    "description": "Checks for duplicate gem entries in Gemfile.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Bundler_DuplicatedGroup",
    "title": "Checks for duplicate group entries in Gemfile.",
    "description": "Checks for duplicate group entries in Gemfile.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Bundler_GemComment",
    "title": "Add a comment describing each gem.",
    "description": "Add a comment describing each gem.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "IgnoredGems",
        "description": "IgnoredGems"
      },
      {
        "name": "OnlyFor",
        "description": "OnlyFor"
      }
    ]
  },
  {
    "patternId": "Bundler_GemFilename",
    "title": "Enforces the filename for managing gems.",
    "description": "Enforces the filename for managing gems.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Bundler_GemVersion",
    "title": "Requires or forbids specifying gem versions.",
    "description": "Requires or forbids specifying gem versions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "AllowedGems",
        "description": "AllowedGems"
      }
    ]
  },
  {
    "patternId": "Bundler_InsecureProtocolSource",
    "title": "The source `:gemcutter`, `:rubygems` and `:rubyforge` are deprecated because HTTP requests are insecure. Please change your source to 'https://rubygems.org' if possible, or 'http://rubygems.org' if not.",
    "description": "The source `:gemcutter`, `:rubygems` and `:rubyforge` are deprecated because HTTP requests are insecure. Please change your source to 'https://rubygems.org' if possible, or 'http://rubygems.org' if not.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "AllowHttpProtocol",
        "description": "AllowHttpProtocol"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Bundler_OrderedGems",
    "title": "Gems within groups in the Gemfile should be alphabetically sorted.",
    "description": "Gems within groups in the Gemfile should be alphabetically sorted.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "TreatCommentsAsGroupSeparators",
        "description": "TreatCommentsAsGroupSeparators"
      },
      {
        "name": "ConsiderPunctuation",
        "description": "ConsiderPunctuation"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Gemspec_DependencyVersion",
    "title": "Requires or forbids specifying gem dependency versions.",
    "description": "Requires or forbids specifying gem dependency versions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "AllowedGems",
        "description": "AllowedGems"
      }
    ]
  },
  {
    "patternId": "Gemspec_DeprecatedAttributeAssignment",
    "title": "Checks that deprecated attribute assignments are not set in a gemspec file.",
    "description": "Checks that deprecated attribute assignments are not set in a gemspec file.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Gemspec_DevelopmentDependencies",
    "title": "Checks that development dependencies are specified in Gemfile rather than gemspec.",
    "description": "Checks that development dependencies are specified in Gemfile rather than gemspec.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowedGems",
        "description": "AllowedGems"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Gemspec_DuplicatedAssignment",
    "title": "An attribute assignment method calls should be listed only once in a gemspec.",
    "description": "An attribute assignment method calls should be listed only once in a gemspec.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Gemspec_OrderedDependencies",
    "title": "Dependencies in the gemspec should be alphabetically sorted.",
    "description": "Dependencies in the gemspec should be alphabetically sorted.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "TreatCommentsAsGroupSeparators",
        "description": "TreatCommentsAsGroupSeparators"
      },
      {
        "name": "ConsiderPunctuation",
        "description": "ConsiderPunctuation"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Gemspec_RequireMFA",
    "title": "Checks that the gemspec has metadata to require Multi-Factor Authentication from RubyGems.",
    "description": "Checks that the gemspec has metadata to require Multi-Factor Authentication from RubyGems.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Gemspec_RequiredRubyVersion",
    "title": "Checks that `required_ruby_version` of gemspec is specified and equal to `TargetRubyVersion` of .rubocop.yml.",
    "description": "Checks that `required_ruby_version` of gemspec is specified and equal to `TargetRubyVersion` of .rubocop.yml.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Gemspec_RubyVersionGlobalsUsage",
    "title": "Checks usage of RUBY_VERSION in gemspec.",
    "description": "Checks usage of RUBY_VERSION in gemspec.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Layout_AccessModifierIndentation",
    "title": "Check indentation of private/protected visibility modifiers.",
    "description": "Check indentation of private/protected visibility modifiers.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_ArgumentAlignment",
    "title": "Align the arguments of a method call if they span more than one line.",
    "description": "Align the arguments of a method call if they span more than one line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_ArrayAlignment",
    "title": "Align the elements of an array literal if they span more than one line.",
    "description": "Align the elements of an array literal if they span more than one line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_AssignmentIndentation",
    "title": "Checks the indentation of the first line of the right-hand-side of a multi-line assignment.",
    "description": "Checks the indentation of the first line of the right-hand-side of a multi-line assignment.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_BeginEndAlignment",
    "title": "Align ends corresponding to begins correctly.",
    "description": "Align ends corresponding to begins correctly.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleAlignWith",
        "description": "EnforcedStyleAlignWith"
      },
      {
        "name": "SupportedStylesAlignWith",
        "description": "SupportedStylesAlignWith"
      },
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Layout_BlockAlignment",
    "title": "Align block ends correctly.",
    "description": "Align block ends correctly.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleAlignWith",
        "description": "EnforcedStyleAlignWith"
      },
      {
        "name": "SupportedStylesAlignWith",
        "description": "SupportedStylesAlignWith"
      }
    ]
  },
  {
    "patternId": "Layout_BlockEndNewline",
    "title": "Put end statement of multiline block on its own line.",
    "description": "Put end statement of multiline block on its own line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_CaseIndentation",
    "title": "Indentation of when in a case/(when|in)/[else/]end.",
    "description": "Indentation of when in a case/(when|in)/[else/]end.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentOneStep",
        "description": "IndentOneStep"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_ClassStructure",
    "title": "Enforces a configured order of definitions within a class body.",
    "description": "Enforces a configured order of definitions within a class body.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "Categories",
        "description": "Categories"
      },
      {
        "name": "ExpectedOrder",
        "description": "ExpectedOrder"
      }
    ]
  },
  {
    "patternId": "Layout_ClosingHeredocIndentation",
    "title": "Checks the indentation of here document closings.",
    "description": "Checks the indentation of here document closings.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ClosingParenthesisIndentation",
    "title": "Checks the indentation of hanging closing parentheses.",
    "description": "Checks the indentation of hanging closing parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_CommentIndentation",
    "title": "Indentation of comments.",
    "description": "Indentation of comments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowForAlignment",
        "description": "AllowForAlignment"
      }
    ]
  },
  {
    "patternId": "Layout_ConditionPosition",
    "title": "Checks for condition placed in a confusing position relative to the keyword.",
    "description": "Checks for condition placed in a confusing position relative to the keyword.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_DefEndAlignment",
    "title": "Align ends corresponding to defs correctly.",
    "description": "Align ends corresponding to defs correctly.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleAlignWith",
        "description": "EnforcedStyleAlignWith"
      },
      {
        "name": "SupportedStylesAlignWith",
        "description": "SupportedStylesAlignWith"
      },
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Layout_DotPosition",
    "title": "Checks the position of the dot in multi-line method calls.",
    "description": "Checks the position of the dot in multi-line method calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_ElseAlignment",
    "title": "Align elses and elsifs correctly.",
    "description": "Align elses and elsifs correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyComment",
    "title": "Checks empty comment.",
    "description": "Checks empty comment.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "AllowBorderComment",
        "description": "AllowBorderComment"
      },
      {
        "name": "AllowMarginComment",
        "description": "AllowMarginComment"
      }
    ]
  },
  {
    "patternId": "Layout_EmptyLineAfterGuardClause",
    "title": "Add empty line after guard clause.",
    "description": "Add empty line after guard clause.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineAfterMagicComment",
    "title": "Add an empty line after magic comments to separate them from code.",
    "description": "Add an empty line after magic comments to separate them from code.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineAfterMultilineCondition",
    "title": "Enforces empty line after multiline condition.",
    "description": "Enforces empty line after multiline condition.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineBetweenDefs",
    "title": "Use empty lines between class/module/method defs.",
    "description": "Use empty lines between class/module/method defs.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EmptyLineBetweenMethodDefs",
        "description": "EmptyLineBetweenMethodDefs"
      },
      {
        "name": "EmptyLineBetweenClassDefs",
        "description": "EmptyLineBetweenClassDefs"
      },
      {
        "name": "EmptyLineBetweenModuleDefs",
        "description": "EmptyLineBetweenModuleDefs"
      },
      {
        "name": "DefLikeMacros",
        "description": "DefLikeMacros"
      },
      {
        "name": "AllowAdjacentOneLineDefs",
        "description": "AllowAdjacentOneLineDefs"
      },
      {
        "name": "NumberOfEmptyLines",
        "description": "NumberOfEmptyLines"
      }
    ]
  },
  {
    "patternId": "Layout_EmptyLinesAroundAccessModifier",
    "title": "Keep blank lines around access modifiers.",
    "description": "Keep blank lines around access modifiers.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_EmptyLinesAroundArguments",
    "title": "Keeps track of empty lines around method arguments.",
    "description": "Keeps track of empty lines around method arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundAttributeAccessor",
    "title": "Keep blank lines around attribute accessors.",
    "description": "Keep blank lines around attribute accessors.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowAliasSyntax",
        "description": "AllowAliasSyntax"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Layout_EmptyLinesAroundBeginBody",
    "title": "Keeps track of empty lines around begin-end bodies.",
    "description": "Keeps track of empty lines around begin-end bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundBlockBody",
    "title": "Keeps track of empty lines around block bodies.",
    "description": "Keeps track of empty lines around block bodies.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_EmptyLinesAroundClassBody",
    "title": "Keeps track of empty lines around class bodies.",
    "description": "Keeps track of empty lines around class bodies.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_EmptyLinesAroundExceptionHandlingKeywords",
    "title": "Keeps track of empty lines around exception handling keywords.",
    "description": "Keeps track of empty lines around exception handling keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundMethodBody",
    "title": "Keeps track of empty lines around method bodies.",
    "description": "Keeps track of empty lines around method bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundModuleBody",
    "title": "Keeps track of empty lines around module bodies.",
    "description": "Keeps track of empty lines around module bodies.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_EmptyLines",
    "title": "Don't use several empty lines in a row.",
    "description": "Don't use several empty lines in a row.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EndAlignment",
    "title": "Align ends correctly.",
    "description": "Align ends correctly.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleAlignWith",
        "description": "EnforcedStyleAlignWith"
      },
      {
        "name": "SupportedStylesAlignWith",
        "description": "SupportedStylesAlignWith"
      },
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Layout_EndOfLine",
    "title": "Use Unix-style line endings.",
    "description": "Use Unix-style line endings.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_ExtraSpacing",
    "title": "Do not use unnecessary spacing.",
    "description": "Do not use unnecessary spacing.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowForAlignment",
        "description": "AllowForAlignment"
      },
      {
        "name": "AllowBeforeTrailingComments",
        "description": "AllowBeforeTrailingComments"
      },
      {
        "name": "ForceEqualSignAlignment",
        "description": "ForceEqualSignAlignment"
      }
    ]
  },
  {
    "patternId": "Layout_FirstArgumentIndentation",
    "title": "Checks the indentation of the first argument in a method call.",
    "description": "Checks the indentation of the first argument in a method call.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_FirstArrayElementIndentation",
    "title": "Checks the indentation of the first element in an array literal.",
    "description": "Checks the indentation of the first element in an array literal.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_FirstArrayElementLineBreak",
    "title": "Checks for a line break before the first element in a multi-line array.",
    "description": "Checks for a line break before the first element in a multi-line array.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultilineFinalElement",
        "description": "AllowMultilineFinalElement"
      }
    ]
  },
  {
    "patternId": "Layout_FirstHashElementIndentation",
    "title": "Checks the indentation of the first key in a hash literal.",
    "description": "Checks the indentation of the first key in a hash literal.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_FirstHashElementLineBreak",
    "title": "Checks for a line break before the first element in a multi-line hash.",
    "description": "Checks for a line break before the first element in a multi-line hash.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultilineFinalElement",
        "description": "AllowMultilineFinalElement"
      }
    ]
  },
  {
    "patternId": "Layout_FirstMethodArgumentLineBreak",
    "title": "Checks for a line break before the first argument in a multi-line method call.",
    "description": "Checks for a line break before the first argument in a multi-line method call.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultilineFinalElement",
        "description": "AllowMultilineFinalElement"
      }
    ]
  },
  {
    "patternId": "Layout_FirstMethodParameterLineBreak",
    "title": "Checks for a line break before the first parameter in a multi-line method parameter definition.",
    "description": "Checks for a line break before the first parameter in a multi-line method parameter definition.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultilineFinalElement",
        "description": "AllowMultilineFinalElement"
      }
    ]
  },
  {
    "patternId": "Layout_FirstParameterIndentation",
    "title": "Checks the indentation of the first parameter in a method definition.",
    "description": "Checks the indentation of the first parameter in a method definition.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_HashAlignment",
    "title": "Align the elements of a hash literal if they span more than one line.",
    "description": "Align the elements of a hash literal if they span more than one line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultipleStyles",
        "description": "AllowMultipleStyles"
      },
      {
        "name": "EnforcedHashRocketStyle",
        "description": "EnforcedHashRocketStyle"
      },
      {
        "name": "SupportedHashRocketStyles",
        "description": "SupportedHashRocketStyles"
      },
      {
        "name": "EnforcedColonStyle",
        "description": "EnforcedColonStyle"
      },
      {
        "name": "SupportedColonStyles",
        "description": "SupportedColonStyles"
      },
      {
        "name": "EnforcedLastArgumentHashStyle",
        "description": "EnforcedLastArgumentHashStyle"
      },
      {
        "name": "SupportedLastArgumentHashStyles",
        "description": "SupportedLastArgumentHashStyles"
      }
    ]
  },
  {
    "patternId": "Layout_HeredocArgumentClosingParenthesis",
    "title": "Checks for the placement of the closing parenthesis in a method call that passes a HEREDOC string as an argument.",
    "description": "Checks for the placement of the closing parenthesis in a method call that passes a HEREDOC string as an argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_HeredocIndentation",
    "title": "Checks the indentation of the here document bodies.",
    "description": "Checks the indentation of the here document bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentationConsistency",
    "title": "Keep indentation straight.",
    "description": "Keep indentation straight.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_IndentationStyle",
    "title": "Consistent indentation either with tabs only or spaces only.",
    "description": "Consistent indentation either with tabs only or spaces only.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_IndentationWidth",
    "title": "Use 2 spaces for indentation.",
    "description": "Use 2 spaces for indentation.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Width",
        "description": "Width"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Layout_InitialIndentation",
    "title": "Checks the indentation of the first non-blank non-comment line in a file.",
    "description": "Checks the indentation of the first non-blank non-comment line in a file.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_LeadingCommentSpace",
    "title": "Comments should start with a space.",
    "description": "Comments should start with a space.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowDoxygenCommentStyle",
        "description": "AllowDoxygenCommentStyle"
      },
      {
        "name": "AllowGemfileRubyComment",
        "description": "AllowGemfileRubyComment"
      }
    ]
  },
  {
    "patternId": "Layout_LeadingEmptyLines",
    "title": "Check for unnecessary blank lines at the beginning of a file.",
    "description": "Check for unnecessary blank lines at the beginning of a file.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_LineContinuationLeadingSpace",
    "title": "Use trailing spaces instead of leading spaces in strings broken over multiple lines (by a backslash).",
    "description": "Use trailing spaces instead of leading spaces in strings broken over multiple lines (by a backslash).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_LineContinuationSpacing",
    "title": "Checks the spacing in front of backslash in line continuations.",
    "description": "Checks the spacing in front of backslash in line continuations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_LineEndStringConcatenationIndentation",
    "title": "Checks the indentation of the next line after a line that ends with a string literal and a backslash.",
    "description": "Checks the indentation of the next line after a line that ends with a string literal and a backslash.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_LineLength",
    "title": "Checks that line length does not exceed the configured limit.",
    "description": "Checks that line length does not exceed the configured limit.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "AllowHeredoc",
        "description": "AllowHeredoc"
      },
      {
        "name": "AllowURI",
        "description": "AllowURI"
      },
      {
        "name": "URISchemes",
        "description": "URISchemes"
      },
      {
        "name": "IgnoreCopDirectives",
        "description": "IgnoreCopDirectives"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineArrayBraceLayout",
    "title": "Checks that the closing brace in an array literal is either on the same line as the last array element, or a new line.",
    "description": "Checks that the closing brace in an array literal is either on the same line as the last array element, or a new line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineArrayLineBreaks",
    "title": "Checks that each item in a multi-line array literal starts on a separate line.",
    "description": "Checks that each item in a multi-line array literal starts on a separate line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultilineFinalElement",
        "description": "AllowMultilineFinalElement"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineAssignmentLayout",
    "title": "Check for a newline after the assignment operator in multi-line assignments.",
    "description": "Check for a newline after the assignment operator in multi-line assignments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SupportedTypes",
        "description": "SupportedTypes"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineBlockLayout",
    "title": "Ensures newlines after multiline block do statements.",
    "description": "Ensures newlines after multiline block do statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineHashBraceLayout",
    "title": "Checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.",
    "description": "Checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineHashKeyLineBreaks",
    "title": "Checks that each item in a multi-line hash literal starts on a separate line.",
    "description": "Checks that each item in a multi-line hash literal starts on a separate line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultilineFinalElement",
        "description": "AllowMultilineFinalElement"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineMethodArgumentLineBreaks",
    "title": "Checks that each argument in a multi-line method call starts on a separate line.",
    "description": "Checks that each argument in a multi-line method call starts on a separate line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultilineFinalElement",
        "description": "AllowMultilineFinalElement"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineMethodCallBraceLayout",
    "title": "Checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.",
    "description": "Checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineMethodCallIndentation",
    "title": "Checks indentation of method calls with the dot operator that span more than one line.",
    "description": "Checks indentation of method calls with the dot operator that span more than one line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineMethodDefinitionBraceLayout",
    "title": "Checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.",
    "description": "Checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineMethodParameterLineBreaks",
    "title": "Checks that each parameter in a multi-line method definition starts on a separate line.",
    "description": "Checks that each parameter in a multi-line method definition starts on a separate line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultilineFinalElement",
        "description": "AllowMultilineFinalElement"
      }
    ]
  },
  {
    "patternId": "Layout_MultilineOperationIndentation",
    "title": "Checks indentation of binary operations that span more than one line.",
    "description": "Checks indentation of binary operations that span more than one line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_ParameterAlignment",
    "title": "Align the parameters of a method definition if they span more than one line.",
    "description": "Align the parameters of a method definition if they span more than one line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IndentationWidth",
        "description": "IndentationWidth"
      }
    ]
  },
  {
    "patternId": "Layout_RedundantLineBreak",
    "title": "Do not break up an expression into multiple lines when it fits on a single line.",
    "description": "Do not break up an expression into multiple lines when it fits on a single line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "InspectBlocks",
        "description": "InspectBlocks"
      }
    ]
  },
  {
    "patternId": "Layout_RescueEnsureAlignment",
    "title": "Align rescues and ensures correctly.",
    "description": "Align rescues and ensures correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SingleLineBlockChain",
    "title": "Put method call on a separate line if chained to a single line block.",
    "description": "Put method call on a separate line if chained to a single line block.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterColon",
    "title": "Use spaces after colons.",
    "description": "Use spaces after colons.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterComma",
    "title": "Use spaces after commas.",
    "description": "Use spaces after commas.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterMethodName",
    "title": "Do not put a space between a method name and the opening parenthesis in a method definition.",
    "description": "Do not put a space between a method name and the opening parenthesis in a method definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterNot",
    "title": "Tracks redundant space after the ! operator.",
    "description": "Tracks redundant space after the ! operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterSemicolon",
    "title": "Use spaces after semicolons.",
    "description": "Use spaces after semicolons.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundBlockParameters",
    "title": "Checks the spacing inside and after block parameters pipes.",
    "description": "Checks the spacing inside and after block parameters pipes.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleInsidePipes",
        "description": "EnforcedStyleInsidePipes"
      },
      {
        "name": "SupportedStylesInsidePipes",
        "description": "SupportedStylesInsidePipes"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceAroundEqualsInParameterDefault",
    "title": "Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.",
    "description": "Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceAroundKeyword",
    "title": "Use a space around keywords if appropriate.",
    "description": "Use a space around keywords if appropriate.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundMethodCallOperator",
    "title": "Checks method call operators to not have spaces around them.",
    "description": "Checks method call operators to not have spaces around them.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundOperators",
    "title": "Use a single space around operators.",
    "description": "Use a single space around operators.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowForAlignment",
        "description": "AllowForAlignment"
      },
      {
        "name": "EnforcedStyleForExponentOperator",
        "description": "EnforcedStyleForExponentOperator"
      },
      {
        "name": "SupportedStylesForExponentOperator",
        "description": "SupportedStylesForExponentOperator"
      },
      {
        "name": "EnforcedStyleForRationalLiterals",
        "description": "EnforcedStyleForRationalLiterals"
      },
      {
        "name": "SupportedStylesForRationalLiterals",
        "description": "SupportedStylesForRationalLiterals"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceBeforeBlockBraces",
    "title": "Checks that the left block brace has or doesn't have space before it.",
    "description": "Checks that the left block brace has or doesn't have space before it.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "EnforcedStyleForEmptyBraces",
        "description": "EnforcedStyleForEmptyBraces"
      },
      {
        "name": "SupportedStylesForEmptyBraces",
        "description": "SupportedStylesForEmptyBraces"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceBeforeBrackets",
    "title": "Checks for receiver with a space before the opening brackets.",
    "description": "Checks for receiver with a space before the opening brackets.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeComma",
    "title": "No spaces before commas.",
    "description": "No spaces before commas.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeComment",
    "title": "Checks for missing space between code and a comment on the same line.",
    "description": "Checks for missing space between code and a comment on the same line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeFirstArg",
    "title": "Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.",
    "description": "Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowForAlignment",
        "description": "AllowForAlignment"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceBeforeSemicolon",
    "title": "No spaces before semicolons.",
    "description": "No spaces before semicolons.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInLambdaLiteral",
    "title": "Checks for spaces in lambda literals.",
    "description": "Checks for spaces in lambda literals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceInsideArrayPercentLiteral",
    "title": "No unnecessary additional spaces between elements in %i/%w literals.",
    "description": "No unnecessary additional spaces between elements in %i/%w literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideArrayLiteralBrackets",
    "title": "Checks the spacing inside array literal brackets.",
    "description": "Checks the spacing inside array literal brackets.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "EnforcedStyleForEmptyBrackets",
        "description": "EnforcedStyleForEmptyBrackets"
      },
      {
        "name": "SupportedStylesForEmptyBrackets",
        "description": "SupportedStylesForEmptyBrackets"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceInsideBlockBraces",
    "title": "Checks that block braces have or don't have surrounding space. For blocks taking parameters, checks that the left brace has or doesn't have trailing space.",
    "description": "Checks that block braces have or don't have surrounding space. For blocks taking parameters, checks that the left brace has or doesn't have trailing space.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "EnforcedStyleForEmptyBraces",
        "description": "EnforcedStyleForEmptyBraces"
      },
      {
        "name": "SupportedStylesForEmptyBraces",
        "description": "SupportedStylesForEmptyBraces"
      },
      {
        "name": "SpaceBeforeBlockParameters",
        "description": "SpaceBeforeBlockParameters"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceInsideHashLiteralBraces",
    "title": "Use spaces inside hash literal braces - or don't.",
    "description": "Use spaces inside hash literal braces - or don't.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "EnforcedStyleForEmptyBraces",
        "description": "EnforcedStyleForEmptyBraces"
      },
      {
        "name": "SupportedStylesForEmptyBraces",
        "description": "SupportedStylesForEmptyBraces"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceInsideParens",
    "title": "No spaces after ( or before ).",
    "description": "No spaces after ( or before ).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceInsidePercentLiteralDelimiters",
    "title": "No unnecessary spaces inside delimiters of %i/%w/%x literals.",
    "description": "No unnecessary spaces inside delimiters of %i/%w/%x literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideRangeLiteral",
    "title": "No spaces inside range literals.",
    "description": "No spaces inside range literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideReferenceBrackets",
    "title": "Checks the spacing inside referential brackets.",
    "description": "Checks the spacing inside referential brackets.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "EnforcedStyleForEmptyBrackets",
        "description": "EnforcedStyleForEmptyBrackets"
      },
      {
        "name": "SupportedStylesForEmptyBrackets",
        "description": "SupportedStylesForEmptyBrackets"
      }
    ]
  },
  {
    "patternId": "Layout_SpaceInsideStringInterpolation",
    "title": "Checks for padding/surrounding spaces inside string interpolation.",
    "description": "Checks for padding/surrounding spaces inside string interpolation.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_TrailingEmptyLines",
    "title": "Checks trailing blank lines and final newline.",
    "description": "Checks trailing blank lines and final newline.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Layout_TrailingWhitespace",
    "title": "Avoid trailing whitespace.",
    "description": "Avoid trailing whitespace.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowInHeredoc",
        "description": "AllowInHeredoc"
      }
    ]
  },
  {
    "patternId": "Lint_AmbiguousAssignment",
    "title": "Checks for mistyped shorthand assignments.",
    "description": "Checks for mistyped shorthand assignments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousBlockAssociation",
    "title": "Checks for ambiguous block association with method when param passed without parentheses.",
    "description": "Checks for ambiguous block association with method when param passed without parentheses.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Lint_AmbiguousOperator",
    "title": "Checks for ambiguous operators in the first argument of a method invocation without parentheses.",
    "description": "Checks for ambiguous operators in the first argument of a method invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousOperatorPrecedence",
    "title": "Checks for expressions containing multiple binary operations with ambiguous precedence.",
    "description": "Checks for expressions containing multiple binary operations with ambiguous precedence.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousRange",
    "title": "Checks for ranges with ambiguous boundaries.",
    "description": "Checks for ranges with ambiguous boundaries.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "RequireParenthesesForMethodChains",
        "description": "RequireParenthesesForMethodChains"
      }
    ]
  },
  {
    "patternId": "Lint_AmbiguousRegexpLiteral",
    "title": "Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.",
    "description": "Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AssignmentInCondition",
    "title": "Don't use assignment in conditions.",
    "description": "Don't use assignment in conditions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "AllowSafeAssignment",
        "description": "AllowSafeAssignment"
      }
    ]
  },
  {
    "patternId": "Lint_BigDecimalNew",
    "title": "`BigDecimal.new()` is deprecated. Use `BigDecimal()` instead.",
    "description": "`BigDecimal.new()` is deprecated. Use `BigDecimal()` instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_BinaryOperatorWithIdenticalOperands",
    "title": "Checks for places where binary operator has identical operands.",
    "description": "Checks for places where binary operator has identical operands.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_BooleanSymbol",
    "title": "Check for `:true` and `:false` symbols.",
    "description": "Check for `:true` and `:false` symbols.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_CircularArgumentReference",
    "title": "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.",
    "description": "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ConstantDefinitionInBlock",
    "title": "Do not define constants within a block.",
    "description": "Do not define constants within a block.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Lint_ConstantOverwrittenInRescue",
    "title": "Checks for overwriting an exception with an exception result by use `rescue =>`.",
    "description": "Checks for overwriting an exception with an exception result by use `rescue =>`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ConstantResolution",
    "title": "Check that constants are fully qualified with `::`.",
    "description": "Check that constants are fully qualified with `::`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Only",
        "description": "Only"
      },
      {
        "name": "Ignore",
        "description": "Ignore"
      }
    ]
  },
  {
    "patternId": "Lint_Debugger",
    "title": "Check for debugger calls.",
    "description": "Check for debugger calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "DebuggerMethods",
        "description": "DebuggerMethods"
      },
      {
        "name": "DebuggerRequires",
        "description": "DebuggerRequires"
      }
    ]
  },
  {
    "patternId": "Lint_DeprecatedClassMethods",
    "title": "Check for deprecated class method calls.",
    "description": "Check for deprecated class method calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DeprecatedConstants",
    "title": "Checks for deprecated constants.",
    "description": "Checks for deprecated constants.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "DeprecatedConstants",
        "description": "DeprecatedConstants"
      }
    ]
  },
  {
    "patternId": "Lint_DeprecatedOpenSSLConstant",
    "title": "Don't use algorithm constants for `OpenSSL::Cipher` and `OpenSSL::Digest`.",
    "description": "Don't use algorithm constants for `OpenSSL::Cipher` and `OpenSSL::Digest`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DisjunctiveAssignmentInConstructor",
    "title": "In constructor, plain assignment is preferred over disjunctive.",
    "description": "In constructor, plain assignment is preferred over disjunctive.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_DuplicateBranch",
    "title": "Checks that there are no repeated bodies within `if/unless`, `case-when` and `rescue` constructs.",
    "description": "Checks that there are no repeated bodies within `if/unless`, `case-when` and `rescue` constructs.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IgnoreLiteralBranches",
        "description": "IgnoreLiteralBranches"
      },
      {
        "name": "IgnoreConstantBranches",
        "description": "IgnoreConstantBranches"
      }
    ]
  },
  {
    "patternId": "Lint_DuplicateCaseCondition",
    "title": "Do not repeat values in case conditionals.",
    "description": "Do not repeat values in case conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateElsifCondition",
    "title": "Do not repeat conditions used in if `elsif`.",
    "description": "Do not repeat conditions used in if `elsif`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateHashKey",
    "title": "Check for duplicate keys in hash literals.",
    "description": "Check for duplicate keys in hash literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateMagicComment",
    "title": "Check for duplicated magic comments.",
    "description": "Check for duplicated magic comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateMatchPattern",
    "title": "Do not repeat patterns in `in` keywords.",
    "description": "Do not repeat patterns in `in` keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateMethods",
    "title": "Check for duplicate method definitions.",
    "description": "Check for duplicate method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateRegexpCharacterClassElement",
    "title": "Checks for duplicate elements in Regexp character classes.",
    "description": "Checks for duplicate elements in Regexp character classes.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateRequire",
    "title": "Check for duplicate `require`s and `require_relative`s.",
    "description": "Check for duplicate `require`s and `require_relative`s.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_DuplicateRescueException",
    "title": "Checks that there are no repeated exceptions used in `rescue` expressions.",
    "description": "Checks that there are no repeated exceptions used in `rescue` expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EachWithObjectArgument",
    "title": "Check for immutable argument given to each_with_object.",
    "description": "Check for immutable argument given to each_with_object.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ElseLayout",
    "title": "Check for odd code arrangement in an else block.",
    "description": "Check for odd code arrangement in an else block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyBlock",
    "title": "Checks for blocks without a body.",
    "description": "Checks for blocks without a body.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowComments",
        "description": "AllowComments"
      },
      {
        "name": "AllowEmptyLambdas",
        "description": "AllowEmptyLambdas"
      }
    ]
  },
  {
    "patternId": "Lint_EmptyClass",
    "title": "Checks for classes and metaclasses without a body.",
    "description": "Checks for classes and metaclasses without a body.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowComments",
        "description": "AllowComments"
      }
    ]
  },
  {
    "patternId": "Lint_EmptyConditionalBody",
    "title": "Checks for the presence of `if`, `elsif` and `unless` branches without a body.",
    "description": "Checks for the presence of `if`, `elsif` and `unless` branches without a body.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "AllowComments",
        "description": "AllowComments"
      }
    ]
  },
  {
    "patternId": "Lint_EmptyEnsure",
    "title": "Checks for empty ensure block.",
    "description": "Checks for empty ensure block.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_EmptyExpression",
    "title": "Checks for empty expressions.",
    "description": "Checks for empty expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyFile",
    "title": "Enforces that Ruby source files are not empty.",
    "description": "Enforces that Ruby source files are not empty.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowComments",
        "description": "AllowComments"
      }
    ]
  },
  {
    "patternId": "Lint_EmptyInPattern",
    "title": "Checks for the presence of `in` pattern branches without a body.",
    "description": "Checks for the presence of `in` pattern branches without a body.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowComments",
        "description": "AllowComments"
      }
    ]
  },
  {
    "patternId": "Lint_EmptyInterpolation",
    "title": "Checks for empty string interpolation.",
    "description": "Checks for empty string interpolation.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_EmptyWhen",
    "title": "Checks for `when` branches with empty bodies.",
    "description": "Checks for `when` branches with empty bodies.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowComments",
        "description": "AllowComments"
      }
    ]
  },
  {
    "patternId": "Lint_EnsureReturn",
    "title": "Do not use return in an ensure block.",
    "description": "Do not use return in an ensure block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ErbNewArguments",
    "title": "Use `:trim_mode` and `:eoutvar` keyword arguments to `ERB.new`.",
    "description": "Use `:trim_mode` and `:eoutvar` keyword arguments to `ERB.new`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FlipFlop",
    "title": "Checks for flip-flops.",
    "description": "Checks for flip-flops.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FloatComparison",
    "title": "Checks for the presence of precise comparison of floating point numbers.",
    "description": "Checks for the presence of precise comparison of floating point numbers.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FloatOutOfRange",
    "title": "Catches floating-point literals too large or small for Ruby to represent.",
    "description": "Catches floating-point literals too large or small for Ruby to represent.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FormatParameterMismatch",
    "title": "The number of parameters to format/sprint must match the fields.",
    "description": "The number of parameters to format/sprint must match the fields.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_HashCompareByIdentity",
    "title": "Prefer using `Hash#compare_by_identity` than using `object_id` for keys.",
    "description": "Prefer using `Hash#compare_by_identity` than using `object_id` for keys.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_HeredocMethodCallPosition",
    "title": "Checks for the ordering of a method call where the receiver of the call is a HEREDOC.",
    "description": "Checks for the ordering of a method call where the receiver of the call is a HEREDOC.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_IdentityComparison",
    "title": "Prefer `equal?` over `==` when comparing `object_id`.",
    "description": "Prefer `equal?` over `==` when comparing `object_id`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ImplicitStringConcatenation",
    "title": "Checks for adjacent string literals on the same line, which could better be represented as a single string literal.",
    "description": "Checks for adjacent string literals on the same line, which could better be represented as a single string literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_IncompatibleIoSelectWithFiberScheduler",
    "title": "Checks for `IO.select` that is incompatible with Fiber Scheduler.",
    "description": "Checks for `IO.select` that is incompatible with Fiber Scheduler.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_IneffectiveAccessModifier",
    "title": "Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.",
    "description": "Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_InheritException",
    "title": "Avoid inheriting from the `Exception` class.",
    "description": "Avoid inheriting from the `Exception` class.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Lint_InterpolationCheck",
    "title": "Checks for interpolation in a single quoted string.",
    "description": "Checks for interpolation in a single quoted string.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_ItWithoutArgumentsInBlock",
    "title": "Checks uses of `it` calls without arguments in block.",
    "description": "Checks uses of `it` calls without arguments in block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LambdaWithoutLiteralBlock",
    "title": "Checks uses of lambda without a literal block.",
    "description": "Checks uses of lambda without a literal block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralAsCondition",
    "title": "Checks of literals used in conditions.",
    "description": "Checks of literals used in conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralAssignmentInCondition",
    "title": "Checks for literal assignments in the conditions.",
    "description": "Checks for literal assignments in the conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralInInterpolation",
    "title": "Checks for literals used in interpolation.",
    "description": "Checks for literals used in interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Loop",
    "title": "Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.",
    "description": "Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_MissingCopEnableDirective",
    "title": "Checks for a `# rubocop:enable` after `# rubocop:disable`.",
    "description": "Checks for a `# rubocop:enable` after `# rubocop:disable`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MaximumRangeSize",
        "description": "MaximumRangeSize"
      }
    ]
  },
  {
    "patternId": "Lint_MissingSuper",
    "title": "Checks for the presence of constructors and lifecycle callbacks without calls to `super`.",
    "description": "Checks for the presence of constructors and lifecycle callbacks without calls to `super`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedParentClasses",
        "description": "AllowedParentClasses"
      }
    ]
  },
  {
    "patternId": "Lint_MixedCaseRange",
    "title": "Checks for mixed-case character ranges since they include likely unintended characters.",
    "description": "Checks for mixed-case character ranges since they include likely unintended characters.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_MixedRegexpCaptureTypes",
    "title": "Do not mix named captures and numbered captures in a Regexp literal.",
    "description": "Do not mix named captures and numbered captures in a Regexp literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_MultipleComparison",
    "title": "Use `&&` operator to compare multiple values.",
    "description": "Use `&&` operator to compare multiple values.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NestedMethodDefinition",
    "title": "Do not use nested method definitions.",
    "description": "Do not use nested method definitions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Lint_NestedPercentLiteral",
    "title": "Checks for nested percent literals.",
    "description": "Checks for nested percent literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NextWithoutAccumulator",
    "title": "Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.",
    "description": "Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NoReturnInBeginEndBlocks",
    "title": "Do not `return` inside `begin..end` blocks in assignment contexts.",
    "description": "Do not `return` inside `begin..end` blocks in assignment contexts.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NonAtomicFileOperation",
    "title": "Checks for non-atomic file operations.",
    "description": "Checks for non-atomic file operations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_NonDeterministicRequireOrder",
    "title": "Always sort arrays returned by Dir.glob when requiring files.",
    "description": "Always sort arrays returned by Dir.glob when requiring files.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_NonLocalExitFromIterator",
    "title": "Do not use return in iterator to cause non-local exit.",
    "description": "Do not use return in iterator to cause non-local exit.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NumberConversion",
    "title": "Checks unsafe usage of number conversion methods.",
    "description": "Checks unsafe usage of number conversion methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "IgnoredClasses",
        "description": "IgnoredClasses"
      }
    ]
  },
  {
    "patternId": "Lint_NumberedParameterAssignment",
    "title": "Checks for uses of numbered parameter assignment.",
    "description": "Checks for uses of numbered parameter assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_OrAssignmentToConstant",
    "title": "Checks unintended or-assignment to constant.",
    "description": "Checks unintended or-assignment to constant.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_OrderedMagicComments",
    "title": "Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang.",
    "description": "Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_OutOfRangeRegexpRef",
    "title": "Checks for out of range reference for Regexp because it always returns nil.",
    "description": "Checks for out of range reference for Regexp because it always returns nil.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_ParenthesesAsGroupedExpression",
    "title": "Checks for method calls with a space before the opening parenthesis.",
    "description": "Checks for method calls with a space before the opening parenthesis.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_PercentStringArray",
    "title": "Checks for unwanted commas and quotes in %w/%W literals.",
    "description": "Checks for unwanted commas and quotes in %w/%W literals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_PercentSymbolArray",
    "title": "Checks for unwanted commas and colons in %i/%I literals.",
    "description": "Checks for unwanted commas and colons in %i/%I literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RaiseException",
    "title": "Checks for `raise` or `fail` statements which are raising `Exception` class.",
    "description": "Checks for `raise` or `fail` statements which are raising `Exception` class.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowedImplicitNamespaces",
        "description": "AllowedImplicitNamespaces"
      }
    ]
  },
  {
    "patternId": "Lint_RandOne",
    "title": "Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.",
    "description": "Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantCopEnableDirective",
    "title": "Checks for rubocop:enable comments that can be removed.",
    "description": "Checks for rubocop:enable comments that can be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantDirGlobSort",
    "title": "Checks for redundant `sort` method to `Dir.glob` and `Dir[]`.",
    "description": "Checks for redundant `sort` method to `Dir.glob` and `Dir[]`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_RedundantRegexpQuantifiers",
    "title": "Checks for redundant quantifiers in Regexps.",
    "description": "Checks for redundant quantifiers in Regexps.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantRequireStatement",
    "title": "Checks for unnecessary `require` statement.",
    "description": "Checks for unnecessary `require` statement.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_RedundantSafeNavigation",
    "title": "Checks for redundant safe navigation calls.",
    "description": "Checks for redundant safe navigation calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_RedundantSplatExpansion",
    "title": "Checks for splat unnecessarily being called on literals.",
    "description": "Checks for splat unnecessarily being called on literals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowPercentLiteralArrayArgument",
        "description": "AllowPercentLiteralArrayArgument"
      }
    ]
  },
  {
    "patternId": "Lint_RedundantStringCoercion",
    "title": "Checks for Object#to_s usage in string interpolation.",
    "description": "Checks for Object#to_s usage in string interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantWithIndex",
    "title": "Checks for redundant `with_index`.",
    "description": "Checks for redundant `with_index`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantWithObject",
    "title": "Checks for redundant `with_object`.",
    "description": "Checks for redundant `with_object`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RefinementImportMethods",
    "title": "Use `Refinement#import_methods` when using `include` or `prepend` in `refine` block.",
    "description": "Use `Refinement#import_methods` when using `include` or `prepend` in `refine` block.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_RegexpAsCondition",
    "title": "Do not use regexp literal as a condition. The regexp literal matches `$_` implicitly.",
    "description": "Do not use regexp literal as a condition. The regexp literal matches `$_` implicitly.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RequireParentheses",
    "title": "Use parentheses in the method call to avoid confusion about precedence.",
    "description": "Use parentheses in the method call to avoid confusion about precedence.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RequireRangeParentheses",
    "title": "Checks that a range literal is enclosed in parentheses when the end of the range is at a line break.",
    "description": "Checks that a range literal is enclosed in parentheses when the end of the range is at a line break.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RequireRelativeSelfPath",
    "title": "Checks for uses a file requiring itself with `require_relative`.",
    "description": "Checks for uses a file requiring itself with `require_relative`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueException",
    "title": "Avoid rescuing the Exception class.",
    "description": "Avoid rescuing the Exception class.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueType",
    "title": "Avoid rescuing from non constants that could result in a `TypeError`.",
    "description": "Avoid rescuing from non constants that could result in a `TypeError`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ReturnInVoidContext",
    "title": "Checks for return in void context.",
    "description": "Checks for return in void context.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SafeNavigationConsistency",
    "title": "Check to make sure that if safe navigation is used for a method call in an `&&` or `||` condition that safe navigation is used for all method calls on that same object.",
    "description": "Check to make sure that if safe navigation is used for a method call in an `&&` or `||` condition that safe navigation is used for all method calls on that same object.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Lint_SafeNavigationChain",
    "title": "Do not chain ordinary method call after safe navigation operator.",
    "description": "Do not chain ordinary method call after safe navigation operator.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Lint_SafeNavigationWithEmpty",
    "title": "Avoid `foo&.empty?` in conditionals.",
    "description": "Avoid `foo&.empty?` in conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ScriptPermission",
    "title": "Grant script file execute permission.",
    "description": "Grant script file execute permission.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SelfAssignment",
    "title": "Checks for self-assignments.",
    "description": "Checks for self-assignments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SendWithMixinArgument",
    "title": "Checks for `send` method when using mixin.",
    "description": "Checks for `send` method when using mixin.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowedArgument",
    "title": "Avoid reassigning arguments before they were used.",
    "description": "Avoid reassigning arguments before they were used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IgnoreImplicitReferences",
        "description": "IgnoreImplicitReferences"
      }
    ]
  },
  {
    "patternId": "Lint_ShadowedException",
    "title": "Avoid rescuing a higher level exception before a lower level exception.",
    "description": "Avoid rescuing a higher level exception before a lower level exception.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowingOuterLocalVariable",
    "title": "Do not use the same name as outer local variable for block arguments or block local variables.",
    "description": "Do not use the same name as outer local variable for block arguments or block local variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_StructNewOverride",
    "title": "Disallow overriding the `Struct` built-in methods via `Struct.new`.",
    "description": "Disallow overriding the `Struct` built-in methods via `Struct.new`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SuppressedException",
    "title": "Don't suppress exceptions.",
    "description": "Don't suppress exceptions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowComments",
        "description": "AllowComments"
      },
      {
        "name": "AllowNil",
        "description": "AllowNil"
      }
    ]
  },
  {
    "patternId": "Lint_SymbolConversion",
    "title": "Checks for unnecessary symbol conversions.",
    "description": "Checks for unnecessary symbol conversions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Lint_Syntax",
    "title": "Checks for syntax errors.",
    "description": "Checks for syntax errors.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ToEnumArguments",
    "title": "Ensures that `to_enum`/`enum_for`, called for the current method, has correct arguments.",
    "description": "Ensures that `to_enum`/`enum_for`, called for the current method, has correct arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ToJSON",
    "title": "Ensure #to_json includes an optional argument.",
    "description": "Ensure #to_json includes an optional argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_TopLevelReturnWithArgument",
    "title": "Detects top level return statements with argument.",
    "description": "Detects top level return statements with argument.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Lint_TrailingCommaInAttributeDeclaration",
    "title": "Checks for trailing commas in attribute declarations.",
    "description": "Checks for trailing commas in attribute declarations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_TripleQuotes",
    "title": "Checks for useless triple quote constructs.",
    "description": "Checks for useless triple quote constructs.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnderscorePrefixedVariableName",
    "title": "Do not use prefix `_` for a variable that is used.",
    "description": "Do not use prefix `_` for a variable that is used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowKeywordBlockArguments",
        "description": "AllowKeywordBlockArguments"
      }
    ]
  },
  {
    "patternId": "Lint_UnexpectedBlockArity",
    "title": "Looks for blocks that have fewer arguments that the calling method expects.",
    "description": "Looks for blocks that have fewer arguments that the calling method expects.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "Methods",
        "description": "Methods"
      }
    ]
  },
  {
    "patternId": "Lint_UnifiedInteger",
    "title": "Use Integer instead of Fixnum or Bignum.",
    "description": "Use Integer instead of Fixnum or Bignum.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnmodifiedReduceAccumulator",
    "title": "Checks for `reduce` or `inject` blocks that do not update the accumulator each iteration.",
    "description": "Checks for `reduce` or `inject` blocks that do not update the accumulator each iteration.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnreachableCode",
    "title": "Unreachable code.",
    "description": "Unreachable code.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnreachableLoop",
    "title": "Checks for loops that will have at most one iteration.",
    "description": "Checks for loops that will have at most one iteration.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Lint_UnusedBlockArgument",
    "title": "Checks for unused block arguments.",
    "description": "Checks for unused block arguments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "IgnoreEmptyBlocks",
        "description": "IgnoreEmptyBlocks"
      },
      {
        "name": "AllowUnusedKeywordArguments",
        "description": "AllowUnusedKeywordArguments"
      }
    ]
  },
  {
    "patternId": "Lint_UnusedMethodArgument",
    "title": "Checks for unused method arguments.",
    "description": "Checks for unused method arguments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "AllowUnusedKeywordArguments",
        "description": "AllowUnusedKeywordArguments"
      },
      {
        "name": "IgnoreEmptyMethods",
        "description": "IgnoreEmptyMethods"
      },
      {
        "name": "IgnoreNotImplementedMethods",
        "description": "IgnoreNotImplementedMethods"
      }
    ]
  },
  {
    "patternId": "Lint_UriEscapeUnescape",
    "title": "`URI.escape` method is obsolete and should not be used. Instead, use `CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component` depending on your specific use case. Also `URI.unescape` method is obsolete and should not be used.",
    "description": "`URI.escape` method is obsolete and should not be used. Instead, use `CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component` depending on your specific use case. Also `URI.unescape` method is obsolete and should not be used. Instead, use `CGI.unescape`, `URI.decode_www_form` or `URI.decode_www_form_component` depending on your specific use case.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UriRegexp",
    "title": "Use `URI::DEFAULT_PARSER.make_regexp` instead of `URI.regexp`.",
    "description": "Use `URI::DEFAULT_PARSER.make_regexp` instead of `URI.regexp`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAccessModifier",
    "title": "Checks for useless access modifiers.",
    "description": "Checks for useless access modifiers.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "ContextCreatingMethods",
        "description": "ContextCreatingMethods"
      },
      {
        "name": "MethodCreatingMethods",
        "description": "MethodCreatingMethods"
      }
    ]
  },
  {
    "patternId": "Lint_UselessAssignment",
    "title": "Checks for useless assignment to a local variable.",
    "description": "Checks for useless assignment to a local variable.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_UselessElseWithoutRescue",
    "title": "Checks for useless `else` in `begin..end` without `rescue`.",
    "description": "Checks for useless `else` in `begin..end` without `rescue`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessMethodDefinition",
    "title": "Checks for useless method definitions.",
    "description": "Checks for useless method definitions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_UselessRescue",
    "title": "Checks for useless `rescue`s.",
    "description": "Checks for useless `rescue`s.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessRuby2Keywords",
    "title": "Finds unnecessary uses of `ruby2_keywords`.",
    "description": "Finds unnecessary uses of `ruby2_keywords`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessSetterCall",
    "title": "Checks for useless setter call to a local variable.",
    "description": "Checks for useless setter call to a local variable.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Lint_UselessTimes",
    "title": "Checks for useless `Integer#times` calls.",
    "description": "Checks for useless `Integer#times` calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      }
    ]
  },
  {
    "patternId": "Lint_Void",
    "title": "Possible use of operator/literal/variable in void context.",
    "description": "Possible use of operator/literal/variable in void context.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "CheckForMethodsWithNoSideEffects",
        "description": "CheckForMethodsWithNoSideEffects"
      }
    ]
  },
  {
    "patternId": "Metrics_CyclomaticComplexity",
    "title": "A complexity metric that is strongly correlated to the number of test cases needed to validate a method.",
    "description": "A complexity metric that is strongly correlated to the number of test cases needed to validate a method.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "Max",
        "description": "Max"
      }
    ]
  },
  {
    "patternId": "Metrics_AbcSize",
    "title": "A calculated magnitude based on number of assignments, branches, and conditions.",
    "description": "A calculated magnitude based on number of assignments, branches, and conditions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "CountRepeatedAttributes",
        "description": "CountRepeatedAttributes"
      },
      {
        "name": "Max",
        "description": "Max"
      }
    ]
  },
  {
    "patternId": "Metrics_BlockLength",
    "title": "Avoid long blocks with many lines.",
    "description": "Avoid long blocks with many lines.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "CountComments",
        "description": "CountComments"
      },
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "CountAsOne",
        "description": "CountAsOne"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      },
      {
        "name": "inherit_mode",
        "description": "inherit_mode"
      }
    ]
  },
  {
    "patternId": "Metrics_BlockNesting",
    "title": "Avoid excessive block nesting.",
    "description": "Avoid excessive block nesting.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "CountBlocks",
        "description": "CountBlocks"
      },
      {
        "name": "Max",
        "description": "Max"
      }
    ]
  },
  {
    "patternId": "Metrics_ClassLength",
    "title": "Avoid classes longer than 100 lines of code.",
    "description": "Avoid classes longer than 100 lines of code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "CountComments",
        "description": "CountComments"
      },
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "CountAsOne",
        "description": "CountAsOne"
      }
    ]
  },
  {
    "patternId": "Metrics_CollectionLiteralLength",
    "title": "Checks for `Array` or `Hash` literals with many entries.",
    "description": "Checks for `Array` or `Hash` literals with many entries.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "LengthThreshold",
        "description": "LengthThreshold"
      }
    ]
  },
  {
    "patternId": "Metrics_MethodLength",
    "title": "Avoid methods longer than 10 lines of code.",
    "description": "Avoid methods longer than 10 lines of code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "CountComments",
        "description": "CountComments"
      },
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "CountAsOne",
        "description": "CountAsOne"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Metrics_ModuleLength",
    "title": "Avoid modules longer than 100 lines of code.",
    "description": "Avoid modules longer than 100 lines of code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "CountComments",
        "description": "CountComments"
      },
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "CountAsOne",
        "description": "CountAsOne"
      }
    ]
  },
  {
    "patternId": "Metrics_ParameterLists",
    "title": "Avoid parameter lists longer than three or four parameters.",
    "description": "Avoid parameter lists longer than three or four parameters.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "CountKeywordArgs",
        "description": "CountKeywordArgs"
      },
      {
        "name": "MaxOptionalParameters",
        "description": "MaxOptionalParameters"
      }
    ]
  },
  {
    "patternId": "Metrics_PerceivedComplexity",
    "title": "A complexity metric geared towards measuring complexity for a human reader.",
    "description": "A complexity metric geared towards measuring complexity for a human reader.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "Max",
        "description": "Max"
      }
    ]
  },
  {
    "patternId": "Naming_AccessorMethodName",
    "title": "Check the naming of accessor methods for get_/set_.",
    "description": "Check the naming of accessor methods for get_/set_.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_AsciiIdentifiers",
    "title": "Use only ascii symbols in identifiers and constants.",
    "description": "Use only ascii symbols in identifiers and constants.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AsciiConstants",
        "description": "AsciiConstants"
      }
    ]
  },
  {
    "patternId": "Naming_BlockForwarding",
    "title": "Use anonymous block forwarding.",
    "description": "Use anonymous block forwarding.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "BlockForwardingName",
        "description": "BlockForwardingName"
      }
    ]
  },
  {
    "patternId": "Naming_BlockParameterName",
    "title": "Checks for block parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "description": "Checks for block parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MinNameLength",
        "description": "MinNameLength"
      },
      {
        "name": "AllowNamesEndingInNumbers",
        "description": "AllowNamesEndingInNumbers"
      },
      {
        "name": "AllowedNames",
        "description": "AllowedNames"
      },
      {
        "name": "ForbiddenNames",
        "description": "ForbiddenNames"
      }
    ]
  },
  {
    "patternId": "Naming_ClassAndModuleCamelCase",
    "title": "Use CamelCase for classes and modules.",
    "description": "Use CamelCase for classes and modules.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedNames",
        "description": "AllowedNames"
      }
    ]
  },
  {
    "patternId": "Naming_ConstantName",
    "title": "Constants should use SCREAMING_SNAKE_CASE.",
    "description": "Constants should use SCREAMING_SNAKE_CASE.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_FileName",
    "title": "Use snake_case for source file names.",
    "description": "Use snake_case for source file names.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      },
      {
        "name": "ExpectMatchingDefinition",
        "description": "ExpectMatchingDefinition"
      },
      {
        "name": "CheckDefinitionPathHierarchy",
        "description": "CheckDefinitionPathHierarchy"
      },
      {
        "name": "CheckDefinitionPathHierarchyRoots",
        "description": "CheckDefinitionPathHierarchyRoots"
      },
      {
        "name": "Regex",
        "description": "Regex"
      },
      {
        "name": "IgnoreExecutableScripts",
        "description": "IgnoreExecutableScripts"
      },
      {
        "name": "AllowedAcronyms",
        "description": "AllowedAcronyms"
      }
    ]
  },
  {
    "patternId": "Naming_HeredocDelimiterCase",
    "title": "Use configured case for heredoc delimiters.",
    "description": "Use configured case for heredoc delimiters.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Naming_HeredocDelimiterNaming",
    "title": "Use descriptive heredoc delimiters.",
    "description": "Use descriptive heredoc delimiters.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ForbiddenDelimiters",
        "description": "ForbiddenDelimiters"
      }
    ]
  },
  {
    "patternId": "Naming_InclusiveLanguage",
    "title": "Recommend the use of inclusive language instead of problematic terms.",
    "description": "Recommend the use of inclusive language instead of problematic terms.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "CheckIdentifiers",
        "description": "CheckIdentifiers"
      },
      {
        "name": "CheckConstants",
        "description": "CheckConstants"
      },
      {
        "name": "CheckVariables",
        "description": "CheckVariables"
      },
      {
        "name": "CheckStrings",
        "description": "CheckStrings"
      },
      {
        "name": "CheckSymbols",
        "description": "CheckSymbols"
      },
      {
        "name": "CheckComments",
        "description": "CheckComments"
      },
      {
        "name": "CheckFilepaths",
        "description": "CheckFilepaths"
      },
      {
        "name": "FlaggedTerms",
        "description": "FlaggedTerms"
      }
    ]
  },
  {
    "patternId": "Naming_MemoizedInstanceVariableName",
    "title": "Memoized method name should match memo instance variable name.",
    "description": "Memoized method name should match memo instance variable name.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleForLeadingUnderscores",
        "description": "EnforcedStyleForLeadingUnderscores"
      },
      {
        "name": "SupportedStylesForLeadingUnderscores",
        "description": "SupportedStylesForLeadingUnderscores"
      },
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Naming_MethodName",
    "title": "Use the configured style when naming methods.",
    "description": "Use the configured style when naming methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Naming_MethodParameterName",
    "title": "Checks for method parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "description": "Checks for method parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MinNameLength",
        "description": "MinNameLength"
      },
      {
        "name": "AllowNamesEndingInNumbers",
        "description": "AllowNamesEndingInNumbers"
      },
      {
        "name": "AllowedNames",
        "description": "AllowedNames"
      },
      {
        "name": "ForbiddenNames",
        "description": "ForbiddenNames"
      }
    ]
  },
  {
    "patternId": "Naming_BinaryOperatorParameterName",
    "title": "When defining binary operators, name the argument other.",
    "description": "When defining binary operators, name the argument other.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_PredicateName",
    "title": "Check the names of predicate methods.",
    "description": "Check the names of predicate methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "NamePrefix",
        "description": "NamePrefix"
      },
      {
        "name": "ForbiddenPrefixes",
        "description": "ForbiddenPrefixes"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "MethodDefinitionMacros",
        "description": "MethodDefinitionMacros"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Naming_RescuedExceptionsVariableName",
    "title": "Use consistent rescued exceptions variables naming.",
    "description": "Use consistent rescued exceptions variables naming.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "PreferredName",
        "description": "PreferredName"
      }
    ]
  },
  {
    "patternId": "Naming_VariableName",
    "title": "Use the configured style when naming variables.",
    "description": "Use the configured style when naming variables.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowedIdentifiers",
        "description": "AllowedIdentifiers"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Naming_VariableNumber",
    "title": "Use the configured style when numbering symbols, methods and variables.",
    "description": "Use the configured style when numbering symbols, methods and variables.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "CheckMethodNames",
        "description": "CheckMethodNames"
      },
      {
        "name": "CheckSymbols",
        "description": "CheckSymbols"
      },
      {
        "name": "AllowedIdentifiers",
        "description": "AllowedIdentifiers"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Style_AccessModifierDeclarations",
    "title": "Checks style of how access modifiers are used.",
    "description": "Checks style of how access modifiers are used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowModifiersOnSymbols",
        "description": "AllowModifiersOnSymbols"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_AccessorGrouping",
    "title": "Checks for grouping of accessors in `class` and `module` bodies.",
    "description": "Checks for grouping of accessors in `class` and `module` bodies.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_Alias",
    "title": "Use alias instead of alias_method.",
    "description": "Use alias instead of alias_method.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_AndOr",
    "title": "Use &&/|| instead of and/or.",
    "description": "Use &&/|| instead of and/or.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_ArgumentsForwarding",
    "title": "Use arguments forwarding.",
    "description": "Use arguments forwarding.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowOnlyRestArgument",
        "description": "AllowOnlyRestArgument"
      },
      {
        "name": "UseAnonymousForwarding",
        "description": "UseAnonymousForwarding"
      },
      {
        "name": "RedundantRestArgumentNames",
        "description": "RedundantRestArgumentNames"
      },
      {
        "name": "RedundantKeywordRestArgumentNames",
        "description": "RedundantKeywordRestArgumentNames"
      },
      {
        "name": "RedundantBlockArgumentNames",
        "description": "RedundantBlockArgumentNames"
      }
    ]
  },
  {
    "patternId": "Style_ArrayCoercion",
    "title": "Use Array() instead of explicit Array check or [*var], when dealing with a variable you want to treat as an Array, but you're not certain it's an array.",
    "description": "Use Array() instead of explicit Array check or [*var], when dealing with a variable you want to treat as an Array, but you're not certain it's an array.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_ArrayFirstLast",
    "title": "Use `arr.first` and `arr.last` instead of `arr[0]` and `arr[-1]`.",
    "description": "Use `arr.first` and `arr.last` instead of `arr[0]` and `arr[-1]`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_ArrayIntersect",
    "title": "Use `array1.intersect?(array2)` instead of `(array1 & array2).any?`.",
    "description": "Use `array1.intersect?(array2)` instead of `(array1 & array2).any?`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_ArrayJoin",
    "title": "Use Array#join instead of Array#*.",
    "description": "Use Array#join instead of Array#*.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AsciiComments",
    "title": "Use only ascii symbols in comments.",
    "description": "Use only ascii symbols in comments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedChars",
        "description": "AllowedChars"
      }
    ]
  },
  {
    "patternId": "Style_Attr",
    "title": "Checks for uses of Module#attr.",
    "description": "Checks for uses of Module#attr.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AutoResourceCleanup",
    "title": "Suggests the usage of an auto resource cleanup version of a method (if available).",
    "description": "Suggests the usage of an auto resource cleanup version of a method (if available).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BarePercentLiterals",
    "title": "Checks if usage of %() or %Q() matches configuration.",
    "description": "Checks if usage of %() or %Q() matches configuration.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_BeginBlock",
    "title": "Avoid the use of BEGIN blocks.",
    "description": "Avoid the use of BEGIN blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BisectedAttrAccessor",
    "title": "Checks for places where `attr_reader` and `attr_writer` for the same method can be combined into single `attr_accessor`.",
    "description": "Checks for places where `attr_reader` and `attr_writer` for the same method can be combined into single `attr_accessor`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BlockComments",
    "title": "Do not use block comments.",
    "description": "Do not use block comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BlockDelimiters",
    "title": "Avoid using {...} for multi-line blocks (multiline chaining is always ugly). Prefer {...} over do...end for single-line blocks.",
    "description": "Avoid using {...} for multi-line blocks (multiline chaining is always ugly). Prefer {...} over do...end for single-line blocks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "ProceduralMethods",
        "description": "ProceduralMethods"
      },
      {
        "name": "FunctionalMethods",
        "description": "FunctionalMethods"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "AllowBracesOnProceduralOneLiners",
        "description": "AllowBracesOnProceduralOneLiners"
      },
      {
        "name": "BracesRequiredMethods",
        "description": "BracesRequiredMethods"
      }
    ]
  },
  {
    "patternId": "Style_CaseEquality",
    "title": "Avoid explicit use of the case equality operator(===).",
    "description": "Avoid explicit use of the case equality operator(===).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowOnConstant",
        "description": "AllowOnConstant"
      },
      {
        "name": "AllowOnSelfClass",
        "description": "AllowOnSelfClass"
      }
    ]
  },
  {
    "patternId": "Style_CaseLikeIf",
    "title": "Identifies places where `if-elsif` constructions can be replaced with `case-when`.",
    "description": "Identifies places where `if-elsif` constructions can be replaced with `case-when`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "MinBranchesCount",
        "description": "MinBranchesCount"
      }
    ]
  },
  {
    "patternId": "Style_CharacterLiteral",
    "title": "Checks for uses of character literals.",
    "description": "Checks for uses of character literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassAndModuleChildren",
    "title": "Checks style of children classes and modules.",
    "description": "Checks style of children classes and modules.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_ClassCheck",
    "title": "Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.",
    "description": "Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_ClassEqualityComparison",
    "title": "Enforces the use of `Object#instance_of?` instead of class comparison for equality.",
    "description": "Enforces the use of `Object#instance_of?` instead of class comparison for equality.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Style_ClassMethods",
    "title": "Use self when defining module/class methods.",
    "description": "Use self when defining module/class methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassMethodsDefinitions",
    "title": "Enforces using `def self.method_name` or `class << self` to define class methods.",
    "description": "Enforces using `def self.method_name` or `class << self` to define class methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_ClassVars",
    "title": "Avoid the use of class variables.",
    "description": "Avoid the use of class variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CollectionCompact",
    "title": "Use `{Array,Hash}#{compact,compact!}` instead of custom logic to reject nils.",
    "description": "Use `{Array,Hash}#{compact,compact!}` instead of custom logic to reject nils.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowedReceivers",
        "description": "AllowedReceivers"
      }
    ]
  },
  {
    "patternId": "Style_CollectionMethods",
    "title": "Preferred collection methods.",
    "description": "Preferred collection methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "PreferredMethods",
        "description": "PreferredMethods"
      },
      {
        "name": "MethodsAcceptingSymbol",
        "description": "MethodsAcceptingSymbol"
      }
    ]
  },
  {
    "patternId": "Style_ColonMethodCall",
    "title": "Do not use :: for method call.",
    "description": "Do not use :: for method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ColonMethodDefinition",
    "title": "Do not use :: for defining class methods.",
    "description": "Do not use :: for defining class methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CombinableLoops",
    "title": "Checks for places where multiple consecutive loops over the same data can be combined into a single loop.",
    "description": "Checks for places where multiple consecutive loops over the same data can be combined into a single loop.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_CommandLiteral",
    "title": "Use `` or %x around command literals.",
    "description": "Use `` or %x around command literals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowInnerBackticks",
        "description": "AllowInnerBackticks"
      }
    ]
  },
  {
    "patternId": "Style_CommentAnnotation",
    "title": "Checks formatting of special comments (TODO, FIXME, OPTIMIZE, HACK, REVIEW, NOTE).",
    "description": "Checks formatting of special comments (TODO, FIXME, OPTIMIZE, HACK, REVIEW, NOTE).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Keywords",
        "description": "Keywords"
      },
      {
        "name": "RequireColon",
        "description": "RequireColon"
      }
    ]
  },
  {
    "patternId": "Style_CommentedKeyword",
    "title": "Do not place comments on the same line as certain keywords.",
    "description": "Do not place comments on the same line as certain keywords.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_ComparableClamp",
    "title": "Enforces the use of `Comparable#clamp` instead of comparison by minimum and maximum.",
    "description": "Enforces the use of `Comparable#clamp` instead of comparison by minimum and maximum.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ConcatArrayLiterals",
    "title": "Enforces the use of `Array#push(item)` instead of `Array#concat([item])` to avoid redundant array literals.",
    "description": "Enforces the use of `Array#push(item)` instead of `Array#concat([item])` to avoid redundant array literals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_ConditionalAssignment",
    "title": "Use the return value of `if` and `case` statements for assignment to a variable and variable comparison instead of assigning that variable inside of each branch.",
    "description": "Use the return value of `if` and `case` statements for assignment to a variable and variable comparison instead of assigning that variable inside of each branch.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "SingleLineConditionsOnly",
        "description": "SingleLineConditionsOnly"
      },
      {
        "name": "IncludeTernaryExpressions",
        "description": "IncludeTernaryExpressions"
      }
    ]
  },
  {
    "patternId": "Style_ConstantVisibility",
    "title": "Check that class- and module constants have visibility declarations.",
    "description": "Check that class- and module constants have visibility declarations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IgnoreModules",
        "description": "IgnoreModules"
      }
    ]
  },
  {
    "patternId": "Style_Copyright",
    "title": "Include a copyright notice in each file before any code.",
    "description": "Include a copyright notice in each file before any code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Notice",
        "description": "Notice"
      },
      {
        "name": "AutocorrectNotice",
        "description": "AutocorrectNotice"
      }
    ]
  },
  {
    "patternId": "Style_DataInheritance",
    "title": "Checks for inheritance from Data.define.",
    "description": "Checks for inheritance from Data.define.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_DateTime",
    "title": "Use Time over DateTime.",
    "description": "Use Time over DateTime.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "AllowCoercion",
        "description": "AllowCoercion"
      }
    ]
  },
  {
    "patternId": "Style_DefWithParentheses",
    "title": "Use def with parentheses when there are arguments.",
    "description": "Use def with parentheses when there are arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Dir",
    "title": "Use the `__dir__` method to retrieve the canonicalized absolute path to the current file.",
    "description": "Use the `__dir__` method to retrieve the canonicalized absolute path to the current file.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DirEmpty",
    "title": "Prefer to use `Dir.empty?('path/to/dir')` when checking if a directory is empty.",
    "description": "Prefer to use `Dir.empty?('path/to/dir')` when checking if a directory is empty.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DisableCopsWithinSourceCodeDirective",
    "title": "Forbids disabling/enabling cops within source code.",
    "description": "Forbids disabling/enabling cops within source code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedCops",
        "description": "AllowedCops"
      }
    ]
  },
  {
    "patternId": "Style_DocumentationMethod",
    "title": "Checks for missing documentation comment for public methods.",
    "description": "Checks for missing documentation comment for public methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      },
      {
        "name": "RequireForNonPublicMethods",
        "description": "RequireForNonPublicMethods"
      }
    ]
  },
  {
    "patternId": "Style_Documentation",
    "title": "Document classes and non-namespace modules.",
    "description": "Document classes and non-namespace modules.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedConstants",
        "description": "AllowedConstants"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Style_DocumentDynamicEvalDefinition",
    "title": "When using `class_eval` (or other `eval`) with string interpolation, add a comment block showing its appearance if interpolated.",
    "description": "When using `class_eval` (or other `eval`) with string interpolation, add a comment block showing its appearance if interpolated.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DoubleCopDisableDirective",
    "title": "Checks for double rubocop:disable comments on a single line.",
    "description": "Checks for double rubocop:disable comments on a single line.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DoubleNegation",
    "title": "Checks for uses of double negation (!!).",
    "description": "Checks for uses of double negation (!!).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_EachForSimpleLoop",
    "title": "Use `Integer#times` for a simple loop which iterates a fixed number of times.",
    "description": "Use `Integer#times` for a simple loop which iterates a fixed number of times.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EachWithObject",
    "title": "Prefer `each_with_object` over `inject` or `reduce`.",
    "description": "Prefer `each_with_object` over `inject` or `reduce`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyBlockParameter",
    "title": "Omit pipes for empty block parameters.",
    "description": "Omit pipes for empty block parameters.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyCaseCondition",
    "title": "Avoid empty condition in case statements.",
    "description": "Avoid empty condition in case statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyElse",
    "title": "Avoid empty else-clauses.",
    "description": "Avoid empty else-clauses.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowComments",
        "description": "AllowComments"
      }
    ]
  },
  {
    "patternId": "Style_EmptyHeredoc",
    "title": "Checks for using empty heredoc to reduce redundancy.",
    "description": "Checks for using empty heredoc to reduce redundancy.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_EmptyLambdaParameter",
    "title": "Omit parens for empty lambda parameters.",
    "description": "Omit parens for empty lambda parameters.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLiteral",
    "title": "Prefer literals to Array.new/Hash.new/String.new.",
    "description": "Prefer literals to Array.new/Hash.new/String.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyMethod",
    "title": "Checks the formatting of empty method definitions.",
    "description": "Checks the formatting of empty method definitions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_EndlessMethod",
    "title": "Avoid the use of multi-lined endless method definitions.",
    "description": "Avoid the use of multi-lined endless method definitions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_Encoding",
    "title": "Use UTF-8 as the source file encoding.",
    "description": "Use UTF-8 as the source file encoding.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EndBlock",
    "title": "Avoid the use of END blocks.",
    "description": "Avoid the use of END blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EnvHome",
    "title": "Checks for consistent usage of `ENV['HOME']`.",
    "description": "Checks for consistent usage of `ENV['HOME']`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_EvalWithLocation",
    "title": "Pass `__FILE__` and `__LINE__` to `eval` method, as they are used by backtraces.",
    "description": "Pass `__FILE__` and `__LINE__` to `eval` method, as they are used by backtraces.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EvenOdd",
    "title": "Favor the use of `Integer#even?` && `Integer#odd?`.",
    "description": "Favor the use of `Integer#even?` && `Integer#odd?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ExactRegexpMatch",
    "title": "Checks for exact regexp match inside Regexp literals.",
    "description": "Checks for exact regexp match inside Regexp literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ExpandPathArguments",
    "title": "Use `expand_path(__dir__)` instead of `expand_path('..', __FILE__)`.",
    "description": "Use `expand_path(__dir__)` instead of `expand_path('..', __FILE__)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ExplicitBlockArgument",
    "title": "Consider using explicit block argument to avoid writing block literal that just passes its arguments to another block.",
    "description": "Consider using explicit block argument to avoid writing block literal that just passes its arguments to another block.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ExponentialNotation",
    "title": "When using exponential notation, favor a mantissa between 1 (inclusive) and 10 (exclusive).",
    "description": "When using exponential notation, favor a mantissa between 1 (inclusive) and 10 (exclusive).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_FetchEnvVar",
    "title": "Suggests `ENV.fetch` for the replacement of `ENV[]`.",
    "description": "Suggests `ENV.fetch` for the replacement of `ENV[]`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedVars",
        "description": "AllowedVars"
      }
    ]
  },
  {
    "patternId": "Style_FileEmpty",
    "title": "Prefer to use `File.empty?('path/to/file')` when checking if a file is empty.",
    "description": "Prefer to use `File.empty?('path/to/file')` when checking if a file is empty.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_FileRead",
    "title": "Favor `File.(bin)read` convenience methods.",
    "description": "Favor `File.(bin)read` convenience methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FileWrite",
    "title": "Favor `File.(bin)write` convenience methods.",
    "description": "Favor `File.(bin)write` convenience methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FloatDivision",
    "title": "For performing float division, coerce one side only.",
    "description": "For performing float division, coerce one side only.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_For",
    "title": "Checks use of for or each in multiline loops.",
    "description": "Checks use of for or each in multiline loops.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_FormatString",
    "title": "Enforce the use of Kernel#sprintf, Kernel#format or String#%.",
    "description": "Enforce the use of Kernel#sprintf, Kernel#format or String#%.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_FormatStringToken",
    "title": "Use a consistent style for format string tokens.",
    "description": "Use a consistent style for format string tokens.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "MaxUnannotatedPlaceholdersAllowed",
        "description": "MaxUnannotatedPlaceholdersAllowed"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Style_FrozenStringLiteralComment",
    "title": "Add the frozen_string_literal comment to the top of files to help transition to frozen string literals by default.",
    "description": "Add the frozen_string_literal comment to the top of files to help transition to frozen string literals by default.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_GlobalStdStream",
    "title": "Enforces the use of `$stdout/$stderr/$stdin` instead of `STDOUT/STDERR/STDIN`.",
    "description": "Enforces the use of `$stdout/$stderr/$stdin` instead of `STDOUT/STDERR/STDIN`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_GlobalVars",
    "title": "Do not introduce global variables.",
    "description": "Do not introduce global variables.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedVariables",
        "description": "AllowedVariables"
      }
    ]
  },
  {
    "patternId": "Style_GuardClause",
    "title": "Check for conditionals that can be replaced with guard clauses.",
    "description": "Check for conditionals that can be replaced with guard clauses.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MinBodyLength",
        "description": "MinBodyLength"
      },
      {
        "name": "AllowConsecutiveConditionals",
        "description": "AllowConsecutiveConditionals"
      }
    ]
  },
  {
    "patternId": "Style_HashAsLastArrayItem",
    "title": "Checks for presence or absence of braces around hash literal as a last array item depending on configuration.",
    "description": "Checks for presence or absence of braces around hash literal as a last array item depending on configuration.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_HashConversion",
    "title": "Avoid Hash[] in favor of ary.to_h or literal hashes.",
    "description": "Avoid Hash[] in favor of ary.to_h or literal hashes.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "AllowSplatArgument",
        "description": "AllowSplatArgument"
      }
    ]
  },
  {
    "patternId": "Style_HashEachMethods",
    "title": "Use Hash#each_key and Hash#each_value.",
    "description": "Use Hash#each_key and Hash#each_value.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowedReceivers",
        "description": "AllowedReceivers"
      }
    ]
  },
  {
    "patternId": "Style_HashExcept",
    "title": "Checks for usages of `Hash#reject`, `Hash#select`, and `Hash#filter` methods that can be replaced with `Hash#except` method.",
    "description": "Checks for usages of `Hash#reject`, `Hash#select`, and `Hash#filter` methods that can be replaced with `Hash#except` method.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_HashLikeCase",
    "title": "Checks for places where `case-when` represents a simple 1:1 mapping and can be replaced with a hash lookup.",
    "description": "Checks for places where `case-when` represents a simple 1:1 mapping and can be replaced with a hash lookup.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MinBranchesCount",
        "description": "MinBranchesCount"
      }
    ]
  },
  {
    "patternId": "Style_HashSyntax",
    "title": "Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax { :a => 1, :b => 2 }.",
    "description": "Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax { :a => 1, :b => 2 }.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "EnforcedShorthandSyntax",
        "description": "EnforcedShorthandSyntax"
      },
      {
        "name": "SupportedShorthandSyntax",
        "description": "SupportedShorthandSyntax"
      },
      {
        "name": "UseHashRocketsWithSymbolValues",
        "description": "UseHashRocketsWithSymbolValues"
      },
      {
        "name": "PreferHashRocketsForNonAlnumEndingSymbols",
        "description": "PreferHashRocketsForNonAlnumEndingSymbols"
      }
    ]
  },
  {
    "patternId": "Style_HashTransformKeys",
    "title": "Prefer `transform_keys` over `each_with_object`, `map`, or `to_h`.",
    "description": "Prefer `transform_keys` over `each_with_object`, `map`, or `to_h`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_HashTransformValues",
    "title": "Prefer `transform_values` over `each_with_object`, `map`, or `to_h`.",
    "description": "Prefer `transform_values` over `each_with_object`, `map`, or `to_h`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_IdenticalConditionalBranches",
    "title": "Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.",
    "description": "Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_IfInsideElse",
    "title": "Finds if nodes inside else, which can be converted to elsif.",
    "description": "Finds if nodes inside else, which can be converted to elsif.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowIfModifier",
        "description": "AllowIfModifier"
      }
    ]
  },
  {
    "patternId": "Style_IfUnlessModifier",
    "title": "Favor modifier if/unless usage when you have a single-line body.",
    "description": "Favor modifier if/unless usage when you have a single-line body.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfUnlessModifierOfIfUnless",
    "title": "Avoid modifier if/unless usage on conditionals.",
    "description": "Avoid modifier if/unless usage on conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfWithBooleanLiteralBranches",
    "title": "Checks for redundant `if` with boolean literal branches.",
    "description": "Checks for redundant `if` with boolean literal branches.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Style_IfWithSemicolon",
    "title": "Do not use if x; .... Use the ternary operator instead.",
    "description": "Do not use if x; .... Use the ternary operator instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ImplicitRuntimeError",
    "title": "Use `raise` or `fail` with an explicit exception class and message, rather than just a message.",
    "description": "Use `raise` or `fail` with an explicit exception class and message, rather than just a message.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InPatternThen",
    "title": "Checks for `in;` uses in `case` expressions.",
    "description": "Checks for `in;` uses in `case` expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InfiniteLoop",
    "title": "Use Kernel#loop for infinite loops. This cop is unsafe if the body may raise a `StopIteration` exception.",
    "description": "Use Kernel#loop for infinite loops. This cop is unsafe if the body may raise a `StopIteration` exception.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_InverseMethods",
    "title": "Use the inverse method instead of `!.method` if an inverse method is defined.",
    "description": "Use the inverse method instead of `!.method` if an inverse method is defined.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "InverseMethods",
        "description": "InverseMethods"
      },
      {
        "name": "InverseBlocks",
        "description": "InverseBlocks"
      }
    ]
  },
  {
    "patternId": "Style_InlineComment",
    "title": "Avoid trailing inline comments.",
    "description": "Avoid trailing inline comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InvertibleUnlessCondition",
    "title": "Favor `if` with inverted condition over `unless`.",
    "description": "Favor `if` with inverted condition over `unless`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "InverseMethods",
        "description": "InverseMethods"
      }
    ]
  },
  {
    "patternId": "Style_IpAddresses",
    "title": "Don't include literal IP addresses in code.",
    "description": "Don't include literal IP addresses in code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedAddresses",
        "description": "AllowedAddresses"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Style_KeywordParametersOrder",
    "title": "Enforces that optional keyword parameters are placed at the end of the parameters list.",
    "description": "Enforces that optional keyword parameters are placed at the end of the parameters list.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Lambda",
    "title": "Use the new lambda literal syntax for single-line blocks.",
    "description": "Use the new lambda literal syntax for single-line blocks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_LambdaCall",
    "title": "Use lambda.call(...) instead of lambda.(...).",
    "description": "Use lambda.call(...) instead of lambda.(...).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_LineEndConcatenation",
    "title": "Use \\ instead of + or << to concatenate two string literals at line end.",
    "description": "Use \\ instead of + or << to concatenate two string literals at line end.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_MagicCommentFormat",
    "title": "Use a consistent style for magic comments.",
    "description": "Use a consistent style for magic comments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "DirectiveCapitalization",
        "description": "DirectiveCapitalization"
      },
      {
        "name": "ValueCapitalization",
        "description": "ValueCapitalization"
      },
      {
        "name": "SupportedCapitalizations",
        "description": "SupportedCapitalizations"
      }
    ]
  },
  {
    "patternId": "Style_MapIntoArray",
    "title": "Checks for usages of `each` with `<<`, `push`, or `append` which can be replaced by `map`.",
    "description": "Checks for usages of `each` with `<<`, `push`, or `append` which can be replaced by `map`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_MapToHash",
    "title": "Prefer `to_h` with a block over `map.to_h`.",
    "description": "Prefer `to_h` with a block over `map.to_h`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_MapToSet",
    "title": "Prefer `to_set` with a block over `map.to_set`.",
    "description": "Prefer `to_set` with a block over `map.to_set`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_MethodCallWithoutArgsParentheses",
    "title": "Do not use parentheses for method calls with no arguments.",
    "description": "Do not use parentheses for method calls with no arguments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Style_MethodCallWithArgsParentheses",
    "title": "Use parentheses for method calls with arguments.",
    "description": "Use parentheses for method calls with arguments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IgnoreMacros",
        "description": "IgnoreMacros"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "IncludedMacros",
        "description": "IncludedMacros"
      },
      {
        "name": "AllowParenthesesInMultilineCall",
        "description": "AllowParenthesesInMultilineCall"
      },
      {
        "name": "AllowParenthesesInChaining",
        "description": "AllowParenthesesInChaining"
      },
      {
        "name": "AllowParenthesesInCamelCaseMethod",
        "description": "AllowParenthesesInCamelCaseMethod"
      },
      {
        "name": "AllowParenthesesInStringInterpolation",
        "description": "AllowParenthesesInStringInterpolation"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_MinMaxComparison",
    "title": "Enforces the use of `max` or `min` instead of comparison for greater or less.",
    "description": "Enforces the use of `max` or `min` instead of comparison for greater or less.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_MultilineInPatternThen",
    "title": "Do not use `then` for multi-line `in` statement.",
    "description": "Do not use `then` for multi-line `in` statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NumberedParameters",
    "title": "Restrict the usage of numbered parameters.",
    "description": "Restrict the usage of numbered parameters.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_OpenStructUse",
    "title": "Avoid using OpenStruct. As of Ruby 3.0, use is officially discouraged due to performance, version compatibility, and potential security issues.",
    "description": "Avoid using OpenStruct. As of Ruby 3.0, use is officially discouraged due to performance, version compatibility, and potential security issues.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_OperatorMethodCall",
    "title": "Checks for redundant dot before operator method call.",
    "description": "Checks for redundant dot before operator method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantArrayConstructor",
    "title": "Checks for the instantiation of array using redundant `Array` constructor.",
    "description": "Checks for the instantiation of array using redundant `Array` constructor.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantAssignment",
    "title": "Checks for redundant assignment before returning.",
    "description": "Checks for redundant assignment before returning.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantConstantBase",
    "title": "Avoid redundant `::` prefix on constant.",
    "description": "Avoid redundant `::` prefix on constant.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantCurrentDirectoryInPath",
    "title": "Checks for uses a redundant current directory in path.",
    "description": "Checks for uses a redundant current directory in path.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantDoubleSplatHashBraces",
    "title": "Checks for redundant uses of double splat hash braces.",
    "description": "Checks for redundant uses of double splat hash braces.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantEach",
    "title": "Checks for redundant `each`.",
    "description": "Checks for redundant `each`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_RedundantFetchBlock",
    "title": "Use `fetch(key, value)` instead of `fetch(key) { value }` when value has Numeric, Rational, Complex, Symbol or String type, `false`, `true`, `nil` or is a constant.",
    "description": "Use `fetch(key, value)` instead of `fetch(key) { value }` when value has Numeric, Rational, Complex, Symbol or String type, `false`, `true`, `nil` or is a constant.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "SafeForConstants",
        "description": "SafeForConstants"
      }
    ]
  },
  {
    "patternId": "Style_RedundantFileExtensionInRequire",
    "title": "Checks for the presence of superfluous `.rb` extension in the filename provided to `require` and `require_relative`.",
    "description": "Checks for the presence of superfluous `.rb` extension in the filename provided to `require` and `require_relative`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantFilterChain",
    "title": "Identifies usages of `any?`, `empty?`, `none?` or `one?` predicate methods chained to `select`/`filter`/`find_all` and change them to use predicate method instead.",
    "description": "Identifies usages of `any?`, `empty?`, `none?` or `one?` predicate methods chained to `select`/`filter`/`find_all` and change them to use predicate method instead.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_RedundantHeredocDelimiterQuotes",
    "title": "Checks for redundant heredoc delimiter quotes.",
    "description": "Checks for redundant heredoc delimiter quotes.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantInitialize",
    "title": "Checks for redundant `initialize` methods.",
    "description": "Checks for redundant `initialize` methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      },
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowComments",
        "description": "AllowComments"
      }
    ]
  },
  {
    "patternId": "Style_RedundantLineContinuation",
    "title": "Check for redundant line continuation.",
    "description": "Check for redundant line continuation.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantRegexpArgument",
    "title": "Identifies places where argument can be replaced from a deterministic regexp to a string.",
    "description": "Identifies places where argument can be replaced from a deterministic regexp to a string.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantRegexpConstructor",
    "title": "Checks for the instantiation of regexp using redundant `Regexp.new` or `Regexp.compile`.",
    "description": "Checks for the instantiation of regexp using redundant `Regexp.new` or `Regexp.compile`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantSelfAssignment",
    "title": "Checks for places where redundant assignments are made for in place modification methods.",
    "description": "Checks for places where redundant assignments are made for in place modification methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_RedundantSelfAssignmentBranch",
    "title": "Checks for places where conditional branch makes redundant self-assignment.",
    "description": "Checks for places where conditional branch makes redundant self-assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RequireOrder",
    "title": "Sort `require` and `require_relative` in alphabetical order.",
    "description": "Sort `require` and `require_relative` in alphabetical order.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_SingleLineDoEndBlock",
    "title": "Checks for single-line `do`...`end` blocks.",
    "description": "Checks for single-line `do`...`end` blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SoleNestedConditional",
    "title": "Finds sole nested conditional nodes which can be merged into outer conditional node.",
    "description": "Finds sole nested conditional nodes which can be merged into outer conditional node.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowModifier",
        "description": "AllowModifier"
      }
    ]
  },
  {
    "patternId": "Style_StaticClass",
    "title": "Prefer modules to classes with only class methods.",
    "description": "Prefer modules to classes with only class methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_MapCompactWithConditionalBlock",
    "title": "Prefer `select` or `reject` over `map { ... }.compact`.",
    "description": "Prefer `select` or `reject` over `map { ... }.compact`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCalledOnDoEndBlock",
    "title": "Avoid chaining a method call on a do...end block.",
    "description": "Avoid chaining a method call on a do...end block.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodDefParentheses",
    "title": "Checks if the method definitions have or don't have parentheses.",
    "description": "Checks if the method definitions have or don't have parentheses.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_MinMax",
    "title": "Use `Enumerable#minmax` instead of `Enumerable#min` and `Enumerable#max` in conjunction.",
    "description": "Use `Enumerable#minmax` instead of `Enumerable#min` and `Enumerable#max` in conjunction.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MissingElse",
    "title": "Require if/case expressions to have an else branches. If enabled, it is recommended that Style/UnlessElse and Style/EmptyElse be enabled. This will conflict with Style/EmptyElse if Style/EmptyElse is configured to style \"both\".",
    "description": "Require if/case expressions to have an else branches. If enabled, it is recommended that Style/UnlessElse and Style/EmptyElse be enabled. This will conflict with Style/EmptyElse if Style/EmptyElse is configured to style \"both\".",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_MissingRespondToMissing",
    "title": "Checks if `method_missing` is implemented without implementing `respond_to_missing`.",
    "description": "Checks if `method_missing` is implemented without implementing `respond_to_missing`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MixinGrouping",
    "title": "Checks for grouping of mixins in `class` and `module` bodies.",
    "description": "Checks for grouping of mixins in `class` and `module` bodies.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_MixinUsage",
    "title": "Checks that `include`, `extend` and `prepend` exists at the top level.",
    "description": "Checks that `include`, `extend` and `prepend` exists at the top level.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ModuleFunction",
    "title": "Checks for usage of `extend self` in modules.",
    "description": "Checks for usage of `extend self` in modules.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Autocorrect",
        "description": "Autocorrect"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_MultilineBlockChain",
    "title": "Avoid multi-line chains of blocks.",
    "description": "Avoid multi-line chains of blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfThen",
    "title": "Do not use then for multi-line if/unless.",
    "description": "Do not use then for multi-line if/unless.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfModifier",
    "title": "Only use if/unless modifiers on single line statements.",
    "description": "Only use if/unless modifiers on single line statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineMethodSignature",
    "title": "Avoid multi-line method signatures.",
    "description": "Avoid multi-line method signatures.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineMemoization",
    "title": "Wrap multiline memoizations in a `begin` and `end` block.",
    "description": "Wrap multiline memoizations in a `begin` and `end` block.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_MultilineTernaryOperator",
    "title": "Avoid multi-line ?: (the ternary operator); use if/unless instead.",
    "description": "Avoid multi-line ?: (the ternary operator); use if/unless instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineWhenThen",
    "title": "Do not use then for multi-line when statement.",
    "description": "Do not use then for multi-line when statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultipleComparison",
    "title": "Avoid comparing a variable with multiple items in a conditional, use Array#include? instead.",
    "description": "Avoid comparing a variable with multiple items in a conditional, use Array#include? instead.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMethodComparison",
        "description": "AllowMethodComparison"
      },
      {
        "name": "ComparisonsThreshold",
        "description": "ComparisonsThreshold"
      }
    ]
  },
  {
    "patternId": "Style_MutableConstant",
    "title": "Do not assign mutable objects to constants.",
    "description": "Do not assign mutable objects to constants.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_NegatedIf",
    "title": "Favor unless over if for negative conditions (or control flow or).",
    "description": "Favor unless over if for negative conditions (or control flow or).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_NegatedIfElseCondition",
    "title": "Checks for uses of `if-else` and ternary operators with a negated condition which can be simplified by inverting condition and swapping branches.",
    "description": "Checks for uses of `if-else` and ternary operators with a negated condition which can be simplified by inverting condition and swapping branches.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NegatedUnless",
    "title": "Favor if over unless for negative conditions.",
    "description": "Favor if over unless for negative conditions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_NegatedWhile",
    "title": "Favor until over while for negative conditions.",
    "description": "Favor until over while for negative conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedFileDirname",
    "title": "Checks for nested `File.dirname`.",
    "description": "Checks for nested `File.dirname`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedModifier",
    "title": "Avoid using nested modifiers.",
    "description": "Avoid using nested modifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedParenthesizedCalls",
    "title": "Parenthesize method calls which are nested inside the argument list of another parenthesized method call.",
    "description": "Parenthesize method calls which are nested inside the argument list of another parenthesized method call.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Style_NestedTernaryOperator",
    "title": "Use one expression per branch in a ternary operator.",
    "description": "Use one expression per branch in a ternary operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Next",
    "title": "Use `next` to skip iteration instead of a condition at the end.",
    "description": "Use `next` to skip iteration instead of a condition at the end.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "MinBodyLength",
        "description": "MinBodyLength"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_NilComparison",
    "title": "Prefer x.nil? to x == nil.",
    "description": "Prefer x.nil? to x == nil.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_NilLambda",
    "title": "Prefer `-> {}` to `-> { nil }`.",
    "description": "Prefer `-> {}` to `-> { nil }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NonNilCheck",
    "title": "Checks for redundant nil checks.",
    "description": "Checks for redundant nil checks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IncludeSemanticChanges",
        "description": "IncludeSemanticChanges"
      }
    ]
  },
  {
    "patternId": "Style_Not",
    "title": "Use ! instead of not.",
    "description": "Use ! instead of not.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NumberedParametersLimit",
    "title": "Avoid excessive numbered params in a single block.",
    "description": "Avoid excessive numbered params in a single block.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      }
    ]
  },
  {
    "patternId": "Style_NumericLiterals",
    "title": "Add underscores to large numeric literals to improve their readability.",
    "description": "Add underscores to large numeric literals to improve their readability.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MinDigits",
        "description": "MinDigits"
      },
      {
        "name": "Strict",
        "description": "Strict"
      },
      {
        "name": "AllowedNumbers",
        "description": "AllowedNumbers"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Style_NumericLiteralPrefix",
    "title": "Use smallcase prefixes for numeric literals.",
    "description": "Use smallcase prefixes for numeric literals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedOctalStyle",
        "description": "EnforcedOctalStyle"
      },
      {
        "name": "SupportedOctalStyles",
        "description": "SupportedOctalStyles"
      }
    ]
  },
  {
    "patternId": "Style_NumericPredicate",
    "title": "Checks for the use of predicate- or comparison methods for numeric comparisons.",
    "description": "Checks for the use of predicate- or comparison methods for numeric comparisons.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Style_ObjectThen",
    "title": "Enforces the use of consistent method names `Object#yield_self` or `Object#then`.",
    "description": "Enforces the use of consistent method names `Object#yield_self` or `Object#then`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_OneLineConditional",
    "title": "Favor the ternary operator (?:) or multi-line constructs over single-line if/then/else/end constructs.",
    "description": "Favor the ternary operator (?:) or multi-line constructs over single-line if/then/else/end constructs.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AlwaysCorrectToMultiline",
        "description": "AlwaysCorrectToMultiline"
      }
    ]
  },
  {
    "patternId": "Style_OrAssignment",
    "title": "Recommend usage of double pipe equals (||=) where applicable.",
    "description": "Recommend usage of double pipe equals (||=) where applicable.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OptionHash",
    "title": "Don't use option hashes when you can use keyword arguments.",
    "description": "Don't use option hashes when you can use keyword arguments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SuspiciousParamNames",
        "description": "SuspiciousParamNames"
      },
      {
        "name": "Allowlist",
        "description": "Allowlist"
      }
    ]
  },
  {
    "patternId": "Style_OptionalArguments",
    "title": "Checks for optional arguments that do not appear at the end of the argument list.",
    "description": "Checks for optional arguments that do not appear at the end of the argument list.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_OptionalBooleanParameter",
    "title": "Use keyword arguments when defining method with boolean argument.",
    "description": "Use keyword arguments when defining method with boolean argument.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Style_ParallelAssignment",
    "title": "Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.",
    "description": "Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ParenthesesAroundCondition",
    "title": "Don't use parentheses around the condition of an if/unless/while.",
    "description": "Don't use parentheses around the condition of an if/unless/while.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowSafeAssignment",
        "description": "AllowSafeAssignment"
      },
      {
        "name": "AllowInMultilineConditions",
        "description": "AllowInMultilineConditions"
      }
    ]
  },
  {
    "patternId": "Style_PercentLiteralDelimiters",
    "title": "Use `%`-literal delimiters consistently.",
    "description": "Use `%`-literal delimiters consistently.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "PreferredDelimiters",
        "description": "PreferredDelimiters"
      }
    ]
  },
  {
    "patternId": "Style_PercentQLiterals",
    "title": "Checks if uses of %Q/%q match the configured preference.",
    "description": "Checks if uses of %Q/%q match the configured preference.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_PerlBackrefs",
    "title": "Avoid Perl-style regex back references.",
    "description": "Avoid Perl-style regex back references.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PreferredHashMethods",
    "title": "Checks use of `has_key?` and `has_value?` Hash methods.",
    "description": "Checks use of `has_key?` and `has_value?` Hash methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_Proc",
    "title": "Use proc instead of Proc.new.",
    "description": "Use proc instead of Proc.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_QuotedSymbols",
    "title": "Use a consistent style for quoted symbols.",
    "description": "Use a consistent style for quoted symbols.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_RaiseArgs",
    "title": "Checks the arguments passed to raise/fail.",
    "description": "Checks the arguments passed to raise/fail.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowedCompactTypes",
        "description": "AllowedCompactTypes"
      }
    ]
  },
  {
    "patternId": "Style_RandomWithOffset",
    "title": "Prefer to use ranges when generating random numbers instead of integers with offsets.",
    "description": "Prefer to use ranges when generating random numbers instead of integers with offsets.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantArgument",
    "title": "Check for a redundant argument passed to certain methods.",
    "description": "Check for a redundant argument passed to certain methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "Methods",
        "description": "Methods"
      }
    ]
  },
  {
    "patternId": "Style_RedundantBegin",
    "title": "Don't use begin blocks when they are not needed.",
    "description": "Don't use begin blocks when they are not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantCapitalW",
    "title": "Checks for %W when interpolation is not needed.",
    "description": "Checks for %W when interpolation is not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantCondition",
    "title": "Checks for unnecessary conditional expressions.",
    "description": "Checks for unnecessary conditional expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantConditional",
    "title": "Don't return true/false from a conditional.",
    "description": "Don't return true/false from a conditional.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantException",
    "title": "Checks for an obsolete RuntimeException argument in raise/fail.",
    "description": "Checks for an obsolete RuntimeException argument in raise/fail.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantFreeze",
    "title": "Checks usages of Object#freeze on immutable objects.",
    "description": "Checks usages of Object#freeze on immutable objects.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantInterpolation",
    "title": "Checks for strings that are just an interpolated expression.",
    "description": "Checks for strings that are just an interpolated expression.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_RedundantParentheses",
    "title": "Checks for parentheses that seem not to serve any purpose.",
    "description": "Checks for parentheses that seem not to serve any purpose.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantPercentQ",
    "title": "Checks for %q/%Q when single quotes or double quotes would do.",
    "description": "Checks for %q/%Q when single quotes or double quotes would do.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantRegexpCharacterClass",
    "title": "Checks for unnecessary single-element Regexp character classes.",
    "description": "Checks for unnecessary single-element Regexp character classes.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantRegexpEscape",
    "title": "Checks for redundant escapes in Regexps.",
    "description": "Checks for redundant escapes in Regexps.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantReturn",
    "title": "Don't use return where it's not required.",
    "description": "Don't use return where it's not required.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowMultipleReturnValues",
        "description": "AllowMultipleReturnValues"
      }
    ]
  },
  {
    "patternId": "Style_RedundantSelf",
    "title": "Don't use self where it's not needed.",
    "description": "Don't use self where it's not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantSort",
    "title": "Use `min` instead of `sort.first`, `max_by` instead of `sort_by...last`, etc.",
    "description": "Use `min` instead of `sort.first`, `max_by` instead of `sort_by...last`, etc.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_RedundantSortBy",
    "title": "Use `sort` instead of `sort_by { |x| x }`.",
    "description": "Use `sort` instead of `sort_by { |x| x }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantStringEscape",
    "title": "Checks for redundant escapes in string literals.",
    "description": "Checks for redundant escapes in string literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RegexpLiteral",
    "title": "Use / or %r around regular expressions.",
    "description": "Use / or %r around regular expressions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowInnerSlashes",
        "description": "AllowInnerSlashes"
      }
    ]
  },
  {
    "patternId": "Style_RescueModifier",
    "title": "Avoid using rescue in its modifier form.",
    "description": "Avoid using rescue in its modifier form.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RescueStandardError",
    "title": "Avoid rescuing without specifying an error class.",
    "description": "Avoid rescuing without specifying an error class.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_ReturnNil",
    "title": "Use return instead of return nil.",
    "description": "Use return instead of return nil.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_ReturnNilInPredicateMethodDefinition",
    "title": "Checks if uses of `return` or `return nil` in predicate method definition.",
    "description": "Checks if uses of `return` or `return nil` in predicate method definition.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Style_SafeNavigation",
    "title": "Transforms usages of a method call safeguarded by a check for the existence of the object to safe navigation (`&.`). Autocorrection is unsafe as it assumes the object will be `nil` or truthy, but never `false`.",
    "description": "Transforms usages of a method call safeguarded by a check for the existence of the object to safe navigation (`&.`). Autocorrection is unsafe as it assumes the object will be `nil` or truthy, but never `false`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ConvertCodeThatCanStartToReturnNil",
        "description": "ConvertCodeThatCanStartToReturnNil"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "MaxChainLength",
        "description": "MaxChainLength"
      }
    ]
  },
  {
    "patternId": "Style_Sample",
    "title": "Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.",
    "description": "Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SelectByRegexp",
    "title": "Prefer grep/grep_v to select/reject with a regexp match.",
    "description": "Prefer grep/grep_v to select/reject with a regexp match.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_SelfAssignment",
    "title": "Checks for places where self-assignment shorthand should have been used.",
    "description": "Checks for places where self-assignment shorthand should have been used.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Semicolon",
    "title": "Don't use semicolons to terminate expressions.",
    "description": "Don't use semicolons to terminate expressions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowAsExpressionSeparator",
        "description": "AllowAsExpressionSeparator"
      }
    ]
  },
  {
    "patternId": "Style_Send",
    "title": "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.",
    "description": "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SignalException",
    "title": "Checks for proper usage of fail and raise.",
    "description": "Checks for proper usage of fail and raise.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_SingleArgumentDig",
    "title": "Avoid using single argument dig method.",
    "description": "Avoid using single argument dig method.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_SingleLineBlockParams",
    "title": "Enforces the names of some block params.",
    "description": "Enforces the names of some block params.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Methods",
        "description": "Methods"
      }
    ]
  },
  {
    "patternId": "Style_SingleLineMethods",
    "title": "Avoid single-line methods.",
    "description": "Avoid single-line methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowIfMethodIsEmpty",
        "description": "AllowIfMethodIsEmpty"
      }
    ]
  },
  {
    "patternId": "Style_SlicingWithRange",
    "title": "Checks array slicing is done with redundant, endless, and beginless ranges when suitable.",
    "description": "Checks array slicing is done with redundant, endless, and beginless ranges when suitable.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_SpecialGlobalVars",
    "title": "Avoid Perl-style global variables.",
    "description": "Avoid Perl-style global variables.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "RequireEnglish",
        "description": "RequireEnglish"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_StabbyLambdaParentheses",
    "title": "Check for the usage of parentheses around stabby lambda arguments.",
    "description": "Check for the usage of parentheses around stabby lambda arguments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_StderrPuts",
    "title": "Use `warn` instead of `$stderr.puts`.",
    "description": "Use `warn` instead of `$stderr.puts`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringChars",
    "title": "Checks for uses of `String#split` with empty string or regexp literal argument.",
    "description": "Checks for uses of `String#split` with empty string or regexp literal argument.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_StringConcatenation",
    "title": "Checks for places where string concatenation can be replaced with string interpolation.",
    "description": "Checks for places where string concatenation can be replaced with string interpolation.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "Mode",
        "description": "Mode"
      }
    ]
  },
  {
    "patternId": "Style_StringHashKeys",
    "title": "Prefer symbols instead of strings as hash keys.",
    "description": "Prefer symbols instead of strings as hash keys.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_StringLiterals",
    "title": "Checks if uses of quotes match the configured preference.",
    "description": "Checks if uses of quotes match the configured preference.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "ConsistentQuotesInMultiline",
        "description": "ConsistentQuotesInMultiline"
      }
    ]
  },
  {
    "patternId": "Style_StringLiteralsInInterpolation",
    "title": "Checks if uses of quotes inside expressions in interpolated strings match the configured preference.",
    "description": "Checks if uses of quotes inside expressions in interpolated strings match the configured preference.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_StringMethods",
    "title": "Checks if configured preferred methods are used over non-preferred.",
    "description": "Checks if configured preferred methods are used over non-preferred.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "PreferredMethods",
        "description": "PreferredMethods"
      }
    ]
  },
  {
    "patternId": "Style_Strip",
    "title": "Use `strip` instead of `lstrip.rstrip`.",
    "description": "Use `strip` instead of `lstrip.rstrip`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StructInheritance",
    "title": "Checks for inheritance from Struct.new.",
    "description": "Checks for inheritance from Struct.new.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_SuperWithArgsParentheses",
    "title": "Use parentheses for `super` with arguments.",
    "description": "Use parentheses for `super` with arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SwapValues",
    "title": "Enforces the use of shorthand-style swapping of 2 variables.",
    "description": "Enforces the use of shorthand-style swapping of 2 variables.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Style_SymbolArray",
    "title": "Use %i or %I for arrays of symbols.",
    "description": "Use %i or %I for arrays of symbols.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "MinSize",
        "description": "MinSize"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_SymbolLiteral",
    "title": "Use plain symbols instead of string symbols when possible.",
    "description": "Use plain symbols instead of string symbols when possible.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SymbolProc",
    "title": "Use symbols as procs instead of blocks when possible.",
    "description": "Use symbols as procs instead of blocks when possible.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowMethodsWithArguments",
        "description": "AllowMethodsWithArguments"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      },
      {
        "name": "AllowComments",
        "description": "AllowComments"
      }
    ]
  },
  {
    "patternId": "Style_TernaryParentheses",
    "title": "Checks for use of parentheses around ternary conditions.",
    "description": "Checks for use of parentheses around ternary conditions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowSafeAssignment",
        "description": "AllowSafeAssignment"
      }
    ]
  },
  {
    "patternId": "Style_TopLevelMethodDefinition",
    "title": "Looks for top-level method definitions.",
    "description": "Looks for top-level method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnClass",
    "title": "Class body goes below class statement.",
    "description": "Class body goes below class statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnMethodDefinition",
    "title": "Method body goes below definition.",
    "description": "Method body goes below definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnModule",
    "title": "Module body goes below module statement.",
    "description": "Module body goes below module statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingCommaInArguments",
    "title": "Checks for trailing comma in argument lists.",
    "description": "Checks for trailing comma in argument lists.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleForMultiline",
        "description": "EnforcedStyleForMultiline"
      },
      {
        "name": "SupportedStylesForMultiline",
        "description": "SupportedStylesForMultiline"
      }
    ]
  },
  {
    "patternId": "Style_TrailingCommaInArrayLiteral",
    "title": "Checks for trailing comma in array literals.",
    "description": "Checks for trailing comma in array literals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleForMultiline",
        "description": "EnforcedStyleForMultiline"
      },
      {
        "name": "SupportedStylesForMultiline",
        "description": "SupportedStylesForMultiline"
      }
    ]
  },
  {
    "patternId": "Style_TrailingCommaInBlockArgs",
    "title": "Checks for useless trailing commas in block arguments.",
    "description": "Checks for useless trailing commas in block arguments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_TrailingCommaInHashLiteral",
    "title": "Checks for trailing comma in hash literals.",
    "description": "Checks for trailing comma in hash literals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyleForMultiline",
        "description": "EnforcedStyleForMultiline"
      },
      {
        "name": "SupportedStylesForMultiline",
        "description": "SupportedStylesForMultiline"
      }
    ]
  },
  {
    "patternId": "Style_TrailingMethodEndStatement",
    "title": "Checks for trailing end statement on line of method body.",
    "description": "Checks for trailing end statement on line of method body.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingUnderscoreVariable",
    "title": "Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.",
    "description": "Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowNamedUnderscoreVariables",
        "description": "AllowNamedUnderscoreVariables"
      }
    ]
  },
  {
    "patternId": "Style_TrivialAccessors",
    "title": "Prefer attr_* methods to trivial readers/writers.",
    "description": "Prefer attr_* methods to trivial readers/writers.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ExactNameMatch",
        "description": "ExactNameMatch"
      },
      {
        "name": "AllowPredicates",
        "description": "AllowPredicates"
      },
      {
        "name": "AllowDSLWriters",
        "description": "AllowDSLWriters"
      },
      {
        "name": "IgnoreClassMethods",
        "description": "IgnoreClassMethods"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Style_UnlessElse",
    "title": "Do not use unless with else. Rewrite these with the positive case first.",
    "description": "Do not use unless with else. Rewrite these with the positive case first.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnlessLogicalOperators",
    "title": "Checks for use of logical operators in an unless condition.",
    "description": "Checks for use of logical operators in an unless condition.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Style_UnpackFirst",
    "title": "Checks for accessing the first element of `String#unpack` instead of using `unpack1`.",
    "description": "Checks for accessing the first element of `String#unpack` instead of using `unpack1`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_VariableInterpolation",
    "title": "Don't interpolate global, instance and class variables directly in strings.",
    "description": "Don't interpolate global, instance and class variables directly in strings.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhenThen",
    "title": "Use when x then ... for one-line cases.",
    "description": "Use when x then ... for one-line cases.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhileUntilDo",
    "title": "Checks for redundant do after while or until.",
    "description": "Checks for redundant do after while or until.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhileUntilModifier",
    "title": "Favor modifier while/until usage when you have a single-line body.",
    "description": "Favor modifier while/until usage when you have a single-line body.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WordArray",
    "title": "Use %w or %W for arrays of words.",
    "description": "Use %w or %W for arrays of words.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "MinSize",
        "description": "MinSize"
      },
      {
        "name": "WordRegex",
        "description": "WordRegex"
      }
    ]
  },
  {
    "patternId": "Style_YAMLFileRead",
    "title": "Checks for the use of `YAML.load`, `YAML.safe_load`, and `YAML.parse` with `File.read` argument.",
    "description": "Checks for the use of `YAML.load`, `YAML.safe_load`, and `YAML.parse` with `File.read` argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_YodaCondition",
    "title": "Forbid or enforce yoda conditions.",
    "description": "Forbid or enforce yoda conditions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Style_YodaExpression",
    "title": "Forbid the use of yoda expressions.",
    "description": "Forbid the use of yoda expressions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "SupportedOperators",
        "description": "SupportedOperators"
      }
    ]
  },
  {
    "patternId": "Style_ZeroLengthPredicate",
    "title": "Use #empty? when testing for objects of length 0.",
    "description": "Use #empty? when testing for objects of length 0.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Security_CompoundHash",
    "title": "When overwriting Object#hash to combine values, prefer delegating to Array#hash over writing a custom implementation.",
    "description": "When overwriting Object#hash to combine values, prefer delegating to Array#hash over writing a custom implementation.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Security_Eval",
    "title": "The use of eval represents a serious security risk.",
    "description": "The use of eval represents a serious security risk.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_IoMethods",
    "title": "Checks for the first argument to `IO.read`, `IO.binread`, `IO.write`, `IO.binwrite`, `IO.foreach`, and `IO.readlines`.",
    "description": "Checks for the first argument to `IO.read`, `IO.binread`, `IO.write`, `IO.binwrite`, `IO.foreach`, and `IO.readlines`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Security_JSONLoad",
    "title": "Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.",
    "description": "Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Security_MarshalLoad",
    "title": "Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.",
    "description": "Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_Open",
    "title": "The use of `Kernel#open` and `URI.open` represent a serious security risk.",
    "description": "The use of `Kernel#open` and `URI.open` represent a serious security risk.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Security_YAMLLoad",
    "title": "Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.",
    "description": "Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Performance_AncestorsInclude",
    "title": "Use `A <= B` instead of `A.ancestors.include?(B)`.",
    "description": "Use `A <= B` instead of `A.ancestors.include?(B)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Performance_ArraySemiInfiniteRangeSlice",
    "title": "Identifies places where slicing arrays with semi-infinite ranges can be replaced by `Array#take` and `Array#drop`.",
    "description": "Identifies places where slicing arrays with semi-infinite ranges can be replaced by `Array#take` and `Array#drop`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Performance_BigDecimalWithNumericArgument",
    "title": "Convert numeric literal to string and pass it to `BigDecimal`.",
    "description": "Convert numeric literal to string and pass it to `BigDecimal`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_BindCall",
    "title": "Use `bind_call(obj, args, ...)` instead of `bind(obj).call(args, ...)`.",
    "description": "Use `bind_call(obj, args, ...)` instead of `bind(obj).call(args, ...)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_BlockGivenWithExplicitBlock",
    "title": "Check block argument explicitly instead of using `block_given?`.",
    "description": "Check block argument explicitly instead of using `block_given?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Caller",
    "title": "Use `caller(n..n)` instead of `caller`.",
    "description": "Use `caller(n..n)` instead of `caller`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_CaseWhenSplat",
    "title": "Reordering `when` conditions with a splat to the end of the `when` branches can improve performance.",
    "description": "Reordering `when` conditions with a splat to the end of the `when` branches can improve performance.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Performance_Casecmp",
    "title": "Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..",
    "description": "Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Performance_CollectionLiteralInLoop",
    "title": "Extract Array and Hash literals outside of loops into local variables or constants.",
    "description": "Extract Array and Hash literals outside of loops into local variables or constants.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MinSize",
        "description": "MinSize"
      }
    ]
  },
  {
    "patternId": "Performance_CompareWithBlock",
    "title": "Use `sort_by(&:foo)` instead of `sort { |a, b| a.foo <=> b.foo }`.",
    "description": "Use `sort_by(&:foo)` instead of `sort { |a, b| a.foo <=> b.foo }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ConcurrentMonotonicTime",
    "title": "Use `Process.clock_gettime(Process::CLOCK_MONOTONIC)` instead of `Concurrent.monotonic_time`.",
    "description": "Use `Process.clock_gettime(Process::CLOCK_MONOTONIC)` instead of `Concurrent.monotonic_time`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ConstantRegexp",
    "title": "Finds regular expressions with dynamic components that are all constants.",
    "description": "Finds regular expressions with dynamic components that are all constants.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Count",
    "title": "Use `count` instead of `{select,find_all,filter,reject}...{size,count,length}`.",
    "description": "Use `count` instead of `{select,find_all,filter,reject}...{size,count,length}`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Performance_DeletePrefix",
    "title": "Use `delete_prefix` instead of `gsub`.",
    "description": "Use `delete_prefix` instead of `gsub`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "SafeMultiline",
        "description": "SafeMultiline"
      }
    ]
  },
  {
    "patternId": "Performance_DeleteSuffix",
    "title": "Use `delete_suffix` instead of `gsub`.",
    "description": "Use `delete_suffix` instead of `gsub`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "SafeMultiline",
        "description": "SafeMultiline"
      }
    ]
  },
  {
    "patternId": "Performance_Detect",
    "title": "Use `detect` instead of `select.first`, `find_all.first`, `filter.first`, `select.last`, `find_all.last`, and `filter.last`.",
    "description": "Use `detect` instead of `select.first`, `find_all.first`, `filter.first`, `select.last`, `find_all.last`, and `filter.last`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Performance_DoubleStartEndWith",
    "title": "Use `str.{start,end}_with?(x, ..., y, ...)` instead of `str.{start,end}_with?(x, ...) || str.{start,end}_with?(y, ...)`.",
    "description": "Use `str.{start,end}_with?(x, ..., y, ...)` instead of `str.{start,end}_with?(x, ...) || str.{start,end}_with?(y, ...)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IncludeActiveSupportAliases",
        "description": "IncludeActiveSupportAliases"
      }
    ]
  },
  {
    "patternId": "Performance_EndWith",
    "title": "Use `end_with?` instead of a regex match anchored to the end of a string.",
    "description": "Use `end_with?` instead of a regex match anchored to the end of a string.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "SafeMultiline",
        "description": "SafeMultiline"
      }
    ]
  },
  {
    "patternId": "Performance_FixedSize",
    "title": "Do not compute the size of statically sized objects except in constants.",
    "description": "Do not compute the size of statically sized objects except in constants.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_FlatMap",
    "title": "Use `Enumerable#flat_map` instead of `Enumerable#map...Array#flatten(1)` or `Enumerable#collect..Array#flatten(1)`.",
    "description": "Use `Enumerable#flat_map` instead of `Enumerable#map...Array#flatten(1)` or `Enumerable#collect..Array#flatten(1)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnabledForFlattenWithoutParams",
        "description": "EnabledForFlattenWithoutParams"
      }
    ]
  },
  {
    "patternId": "Performance_InefficientHashSearch",
    "title": "Use `key?` or `value?` instead of `keys.include?` or `values.include?`.",
    "description": "Use `key?` or `value?` instead of `keys.include?` or `values.include?`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Performance_MapCompact",
    "title": "Use `filter_map` instead of `collection.map(&:do_something).compact`.",
    "description": "Use `filter_map` instead of `collection.map(&:do_something).compact`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Performance_MapMethodChain",
    "title": "Checks if the `map` method is used in a chain.",
    "description": "Checks if the `map` method is used in a chain.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Performance_MethodObjectAsBlock",
    "title": "Use block explicitly instead of block-passing a method object.",
    "description": "Use block explicitly instead of block-passing a method object.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_OpenStruct",
    "title": "Use `Struct` instead of `OpenStruct`.",
    "description": "Use `Struct` instead of `OpenStruct`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Performance_RangeInclude",
    "title": "Use `Range#cover?` instead of `Range#include?` (or `Range#member?`).",
    "description": "Use `Range#cover?` instead of `Range#include?` (or `Range#member?`).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Performance_IoReadlines",
    "title": "Use `IO.each_line` (`IO#each_line`) instead of `IO.readlines` (`IO#readlines`).",
    "description": "Use `IO.each_line` (`IO#each_line`) instead of `IO.readlines` (`IO#readlines`).",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantBlockCall",
    "title": "Use `yield` instead of `block.call`.",
    "description": "Use `yield` instead of `block.call`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantEqualityComparisonBlock",
    "title": "Checks for uses `Enumerable#all?`, `Enumerable#any?`, `Enumerable#one?`, or `Enumerable#none?` are compared with `===` or similar methods in block.",
    "description": "Checks for uses `Enumerable#all?`, `Enumerable#any?`, `Enumerable#one?`, or `Enumerable#none?` are compared with `===` or similar methods in block.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowRegexpMatch",
        "description": "AllowRegexpMatch"
      }
    ]
  },
  {
    "patternId": "Performance_RedundantMatch",
    "title": "Use `=~` instead of `String#match` or `Regexp#match` in a context where the returned `MatchData` is not needed.",
    "description": "Use `=~` instead of `String#match` or `Regexp#match` in a context where the returned `MatchData` is not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantMerge",
    "title": "Use Hash#[]=, rather than Hash#merge! with a single key-value pair.",
    "description": "Use Hash#[]=, rather than Hash#merge! with a single key-value pair.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "MaxKeyValuePairs",
        "description": "MaxKeyValuePairs"
      }
    ]
  },
  {
    "patternId": "Performance_RedundantSortBlock",
    "title": "Use `sort` instead of `sort { |a, b| a <=> b }`.",
    "description": "Use `sort` instead of `sort { |a, b| a <=> b }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantSplitRegexpArgument",
    "title": "Identifies places where `split` argument can be replaced from a deterministic regexp to a string.",
    "description": "Identifies places where `split` argument can be replaced from a deterministic regexp to a string.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantStringChars",
    "title": "Checks for redundant `String#chars`.",
    "description": "Checks for redundant `String#chars`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RegexpMatch",
    "title": "Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`, `Regexp#===`, or `=~` when `MatchData` is not used.",
    "description": "Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`, `Regexp#===`, or `=~` when `MatchData` is not used.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ReverseEach",
    "title": "Use `reverse_each` instead of `reverse.each`.",
    "description": "Use `reverse_each` instead of `reverse.each`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ReverseFirst",
    "title": "Use `last(n).reverse` instead of `reverse.first(n)`.",
    "description": "Use `last(n).reverse` instead of `reverse.first(n)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_SelectMap",
    "title": "Use `filter_map` instead of `ary.select(&:foo).map(&:bar)`.",
    "description": "Use `filter_map` instead of `ary.select(&:foo).map(&:bar)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Size",
    "title": "Use `size` instead of `count` for counting the number of elements in `Array` and `Hash`.",
    "description": "Use `size` instead of `count` for counting the number of elements in `Array` and `Hash`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_SortReverse",
    "title": "Use `sort.reverse` instead of `sort { |a, b| b <=> a }`.",
    "description": "Use `sort.reverse` instead of `sort { |a, b| b <=> a }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Squeeze",
    "title": "Use `squeeze('a')` instead of `gsub(/a+/, 'a')`.",
    "description": "Use `squeeze('a')` instead of `gsub(/a+/, 'a')`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_StartWith",
    "title": "Use `start_with?` instead of a regex match anchored to the beginning of a string.",
    "description": "Use `start_with?` instead of a regex match anchored to the beginning of a string.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "SafeMultiline",
        "description": "SafeMultiline"
      }
    ]
  },
  {
    "patternId": "Performance_StringIdentifierArgument",
    "title": "Use symbol identifier argument instead of string identifier argument.",
    "description": "Use symbol identifier argument instead of string identifier argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_StringInclude",
    "title": "Use `String#include?` instead of a regex match with literal-only pattern.",
    "description": "Use `String#include?` instead of a regex match with literal-only pattern.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Performance_StringReplacement",
    "title": "Use `tr` instead of `gsub` when you are replacing the same number of characters. Use `delete` instead of `gsub` when you are deleting characters.",
    "description": "Use `tr` instead of `gsub` when you are replacing the same number of characters. Use `delete` instead of `gsub` when you are deleting characters.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Sum",
    "title": "Use `sum` instead of a custom array summation.",
    "description": "Use `sum` instead of a custom array summation.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "OnlySumOrWithInitialValue",
        "description": "OnlySumOrWithInitialValue"
      }
    ]
  },
  {
    "patternId": "Performance_TimesMap",
    "title": "Checks for .times.map calls.",
    "description": "Checks for .times.map calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Performance_UnfreezeString",
    "title": "Use unary plus to get an unfrozen string literal.",
    "description": "Use unary plus to get an unfrozen string literal.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Performance_UriDefaultParser",
    "title": "Use `URI::DEFAULT_PARSER` instead of `URI::Parser.new`.",
    "description": "Use `URI::DEFAULT_PARSER` instead of `URI::Parser.new`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ChainArrayAllocation",
    "title": "Instead of chaining array methods that allocate new arrays, mutate an existing array.",
    "description": "Instead of chaining array methods that allocate new arrays, mutate an existing array.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActionControllerFlashBeforeRender",
    "title": "Use `flash.now` instead of `flash` before `render`.",
    "description": "Use `flash.now` instead of `flash` before `render`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_ActionControllerTestCase",
    "title": "Use `ActionDispatch::IntegrationTest` instead of `ActionController::TestCase`.",
    "description": "Use `ActionDispatch::IntegrationTest` instead of `ActionController::TestCase`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ActionFilter",
    "title": "Enforces consistent use of action filter methods.",
    "description": "Enforces consistent use of action filter methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ActionOrder",
    "title": "Enforce consistent ordering of controller actions.",
    "description": "Enforce consistent ordering of controller actions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ExpectedOrder",
        "description": "ExpectedOrder"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ActiveRecordAliases",
    "title": "Avoid Active Record aliases: Use `update` instead of `update_attributes`. Use `update!` instead of `update_attributes!`.",
    "description": "Avoid Active Record aliases: Use `update` instead of `update_attributes`. Use `update!` instead of `update_attributes!`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_ActiveRecordCallbacksOrder",
    "title": "Order callback declarations in the order in which they will be executed.",
    "description": "Order callback declarations in the order in which they will be executed.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ActiveRecordOverride",
    "title": "Check for overriding Active Record methods instead of using callbacks.",
    "description": "Check for overriding Active Record methods instead of using callbacks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ActiveSupportAliases",
    "title": "Avoid ActiveSupport aliases of standard ruby methods: `String#starts_with?`, `String#ends_with?`, `Array#append`, `Array#prepend`.",
    "description": "Avoid ActiveSupport aliases of standard ruby methods: `String#starts_with?`, `String#ends_with?`, `Array#append`, `Array#prepend`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActiveSupportOnLoad",
    "title": "Use `ActiveSupport.on_load(...)` to patch Rails framework classes.",
    "description": "Use `ActiveSupport.on_load(...)` to patch Rails framework classes.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_AddColumnIndex",
    "title": "Rails migrations don't make use of a given `index` key, but also doesn't given an error when it's used, so it makes it seem like an index might be used.",
    "description": "Rails migrations don't make use of a given `index` key, but also doesn't given an error when it's used, so it makes it seem like an index might be used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_AfterCommitOverride",
    "title": "Enforces that there is only one call to `after_commit` (and its aliases - `after_create_commit`, `after_update_commit`, and `after_destroy_commit`) with the same callback name per model.",
    "description": "Enforces that there is only one call to `after_commit` (and its aliases - `after_create_commit`, `after_update_commit`, and `after_destroy_commit`) with the same callback name per model.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationController",
    "title": "Check that controllers subclass ApplicationController.",
    "description": "Check that controllers subclass ApplicationController.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_ApplicationJob",
    "title": "Check that jobs subclass ApplicationJob.",
    "description": "Check that jobs subclass ApplicationJob.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_ApplicationMailer",
    "title": "Check that mailers subclass ApplicationMailer.",
    "description": "Check that mailers subclass ApplicationMailer.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_ApplicationRecord",
    "title": "Check that models subclass ApplicationRecord.",
    "description": "Check that models subclass ApplicationRecord.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_ArelStar",
    "title": "Enforces `Arel.star` instead of `\"*\"` for expanded columns.",
    "description": "Enforces `Arel.star` instead of `\"*\"` for expanded columns.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_AssertNot",
    "title": "Use `assert_not` instead of `assert !`.",
    "description": "Use `assert_not` instead of `assert !`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_AttributeDefaultBlockValue",
    "title": "Pass method call in block for attribute option `default`.",
    "description": "Pass method call in block for attribute option `default`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_BelongsTo",
    "title": "Use `optional: true` instead of `required: false` for `belongs_to` relations.",
    "description": "Use `optional: true` instead of `required: false` for `belongs_to` relations.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Blank",
    "title": "Enforces use of `blank?`.",
    "description": "Enforces use of `blank?`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "NilOrEmpty",
        "description": "NilOrEmpty"
      },
      {
        "name": "NotPresent",
        "description": "NotPresent"
      },
      {
        "name": "UnlessPresent",
        "description": "UnlessPresent"
      }
    ]
  },
  {
    "patternId": "Rails_BulkChangeTable",
    "title": "Check whether alter queries are combinable.",
    "description": "Check whether alter queries are combinable.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Database",
        "description": "Database"
      },
      {
        "name": "SupportedDatabases",
        "description": "SupportedDatabases"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_CompactBlank",
    "title": "Checks if collection can be blank-compacted with `compact_blank`.",
    "description": "Checks if collection can be blank-compacted with `compact_blank`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_ContentTag",
    "title": "Use `tag.something` instead of `tag(:something)`.",
    "description": "Use `tag.something` instead of `tag(:something)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Rails_CreateTableWithTimestamps",
    "title": "Checks the migration for which timestamps are not included when creating a new table.",
    "description": "Checks the migration for which timestamps are not included when creating a new table.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Rails_DangerousColumnNames",
    "title": "Avoid dangerous column names.",
    "description": "Avoid dangerous column names.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_Date",
    "title": "Checks the correct usage of date aware methods, such as Date.today, Date.current etc.",
    "description": "Checks the correct usage of date aware methods, such as Date.today, Date.current etc.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowToTime",
        "description": "AllowToTime"
      }
    ]
  },
  {
    "patternId": "Rails_DefaultScope",
    "title": "Avoid use of `default_scope`.",
    "description": "Avoid use of `default_scope`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Delegate",
    "title": "Prefer delegate method for delegations.",
    "description": "Prefer delegate method for delegations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforceForPrefixed",
        "description": "EnforceForPrefixed"
      }
    ]
  },
  {
    "patternId": "Rails_DelegateAllowBlank",
    "title": "Do not use allow_blank as an option to delegate.",
    "description": "Do not use allow_blank as an option to delegate.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_DeprecatedActiveModelErrorsMethods",
    "title": "Avoid manipulating ActiveModel errors hash directly.",
    "description": "Avoid manipulating ActiveModel errors hash directly.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_DotSeparatedKeys",
    "title": "Enforces the use of dot-separated keys instead of `:scope` options in `I18n` translation methods.",
    "description": "Enforces the use of dot-separated keys instead of `:scope` options in `I18n` translation methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_DuplicateAssociation",
    "title": "Don't repeat associations in a model.",
    "description": "Don't repeat associations in a model.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Rails_DuplicateScope",
    "title": "Multiple scopes share this same where clause.",
    "description": "Multiple scopes share this same where clause.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Rails_DurationArithmetic",
    "title": "Do not use duration as arithmetic operand with `Time.current`.",
    "description": "Do not use duration as arithmetic operand with `Time.current`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_DynamicFindBy",
    "title": "Use `find_by` instead of dynamic `find_by_*`.",
    "description": "Use `find_by` instead of dynamic `find_by_*`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "Whitelist",
        "description": "Whitelist"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedReceivers",
        "description": "AllowedReceivers"
      }
    ]
  },
  {
    "patternId": "Rails_EagerEvaluationLogMessage",
    "title": "Checks that blocks are used for interpolated strings passed to `Rails.logger.debug`.",
    "description": "Checks that blocks are used for interpolated strings passed to `Rails.logger.debug`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_EnumHash",
    "title": "Prefer hash syntax over array syntax when defining enums.",
    "description": "Prefer hash syntax over array syntax when defining enums.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_EnumUniqueness",
    "title": "Avoid duplicate integers in hash-syntax `enum` declaration.",
    "description": "Avoid duplicate integers in hash-syntax `enum` declaration.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_EnvLocal",
    "title": "Use `Rails.env.local?` instead of `Rails.env.development? || Rails.env.test?`.",
    "description": "Use `Rails.env.local?` instead of `Rails.env.development? || Rails.env.test?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_EnvironmentComparison",
    "title": "Favor `Rails.env.production?` over `Rails.env == 'production'`.",
    "description": "Favor `Rails.env.production?` over `Rails.env == 'production'`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_EnvironmentVariableAccess",
    "title": "Do not access `ENV` directly after initialization.",
    "description": "Do not access `ENV` directly after initialization.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      },
      {
        "name": "AllowReads",
        "description": "AllowReads"
      },
      {
        "name": "AllowWrites",
        "description": "AllowWrites"
      }
    ]
  },
  {
    "patternId": "Rails_Exit",
    "title": "Favor `fail`, `break`, `return`, etc. over `exit` in application or library code outside of Rake files to avoid exits during unit testing or running in production.",
    "description": "Favor `fail`, `break`, `return`, etc. over `exit` in application or library code outside of Rake files to avoid exits during unit testing or running in production.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Rails_ExpandedDateRange",
    "title": "Checks for expanded date range.",
    "description": "Checks for expanded date range.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FilePath",
    "title": "Use `Rails.root.join` for file path joining.",
    "description": "Use `Rails.root.join` for file path joining.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Rails_FindBy",
    "title": "Prefer find_by over where.first.",
    "description": "Prefer find_by over where.first.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IgnoreWhereFirst",
        "description": "IgnoreWhereFirst"
      }
    ]
  },
  {
    "patternId": "Rails_FindById",
    "title": "Favor the use of `find` over `where.take!`, `find_by!`, and `find_by_id!` when you need to retrieve a single record by primary key when you expect it to be found.",
    "description": "Favor the use of `find` over `where.take!`, `find_by!`, and `find_by_id!` when you need to retrieve a single record by primary key when you expect it to be found.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FindEach",
    "title": "Prefer all.find_each over all.each.",
    "description": "Prefer all.find_each over all.each.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "Rails_FreezeTime",
    "title": "Prefer `freeze_time` over `travel_to` with an argument of the current time.",
    "description": "Prefer `freeze_time` over `travel_to` with an argument of the current time.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_HasAndBelongsToMany",
    "title": "Prefer has_many :through to has_and_belongs_to_many.",
    "description": "Prefer has_many :through to has_and_belongs_to_many.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_HasManyOrHasOneDependent",
    "title": "Define the dependent option to the has_many and has_one associations.",
    "description": "Define the dependent option to the has_many and has_one associations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_HelperInstanceVariable",
    "title": "Do not use instance variables in helpers.",
    "description": "Do not use instance variables in helpers.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_HttpPositionalArguments",
    "title": "Use keyword arguments instead of positional arguments in http method calls.",
    "description": "Use keyword arguments instead of positional arguments in http method calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_HttpStatus",
    "title": "Enforces use of symbolic or numeric value to define HTTP status.",
    "description": "Enforces use of symbolic or numeric value to define HTTP status.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Rails_I18nLazyLookup",
    "title": "Checks for places where I18n \"lazy\" lookup can be used.",
    "description": "Checks for places where I18n \"lazy\" lookup can be used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_I18nLocaleAssignment",
    "title": "Prefer the usage of `I18n.with_locale` instead of manually updating `I18n.locale` value.",
    "description": "Prefer the usage of `I18n.with_locale` instead of manually updating `I18n.locale` value.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_I18nLocaleTexts",
    "title": "Enforces use of I18n and locale files instead of locale specific strings.",
    "description": "Enforces use of I18n and locale files instead of locale specific strings.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_IgnoredColumnsAssignment",
    "title": "Looks for assignments of `ignored_columns` that override previous assignments.",
    "description": "Looks for assignments of `ignored_columns` that override previous assignments.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_IgnoredSkipActionFilterOption",
    "title": "Checks that `if` and `only` (or `except`) are not used together as options of `skip_*` action filter.",
    "description": "Checks that `if` and `only` (or `except`) are not used together as options of `skip_*` action filter.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_IndexBy",
    "title": "Prefer `index_by` over `each_with_object`, `to_h`, or `map`.",
    "description": "Prefer `index_by` over `each_with_object`, `to_h`, or `map`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_IndexWith",
    "title": "Prefer `index_with` over `each_with_object`, `to_h`, or `map`.",
    "description": "Prefer `index_with` over `each_with_object`, `to_h`, or `map`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Inquiry",
    "title": "Prefer Ruby's comparison operators over Active Support's `Array#inquiry` and `String#inquiry`.",
    "description": "Prefer Ruby's comparison operators over Active Support's `Array#inquiry` and `String#inquiry`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_InverseOf",
    "title": "Checks for associations where the inverse cannot be determined automatically.",
    "description": "Checks for associations where the inverse cannot be determined automatically.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IgnoreScopes",
        "description": "IgnoreScopes"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_LexicallyScopedActionFilter",
    "title": "Checks that methods specified in the filter's `only` or `except` options are explicitly defined in the class.",
    "description": "Checks that methods specified in the filter's `only` or `except` options are explicitly defined in the class.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_LinkToBlank",
    "title": "Checks that `link_to` with a `target: \"_blank\"` have a `rel: \"noopener\"` option passed to them.",
    "description": "Checks that `link_to` with a `target: \"_blank\"` have a `rel: \"noopener\"` option passed to them.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_MailerName",
    "title": "Mailer should end with `Mailer` suffix.",
    "description": "Mailer should end with `Mailer` suffix.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_MatchRoute",
    "title": "Don't use `match` to define any routes unless there is a need to map multiple request types among [:get, :post, :patch, :put, :delete] to a single action using the `:via` option.",
    "description": "Don't use `match` to define any routes unless there is a need to map multiple request types among [:get, :post, :patch, :put, :delete] to a single action using the `:via` option.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_MigrationClassName",
    "title": "The class name of the migration should match its file name.",
    "description": "The class name of the migration should match its file name.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_NegateInclude",
    "title": "Prefer `collection.exclude?(obj)` over `!collection.include?(obj)`.",
    "description": "Prefer `collection.exclude?(obj)` over `!collection.include?(obj)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_NotNullColumn",
    "title": "Do not add a NOT NULL column without a default value.",
    "description": "Do not add a NOT NULL column without a default value.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Database",
        "description": "Database"
      },
      {
        "name": "SupportedDatabases",
        "description": "SupportedDatabases"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_OrderById",
    "title": "Do not use the `id` column for ordering. Use a timestamp column to order chronologically.",
    "description": "Do not use the `id` column for ordering. Use a timestamp column to order chronologically.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Output",
    "title": "Checks for calls to puts, print, etc.",
    "description": "Checks for calls to puts, print, etc.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_OutputSafety",
    "title": "The use of `html_safe` or `raw` may be a security risk.",
    "description": "The use of `html_safe` or `raw` may be a security risk.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Pick",
    "title": "Prefer `pick` over `pluck(...).first`.",
    "description": "Prefer `pick` over `pluck(...).first`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_Pluck",
    "title": "Prefer `pluck` over `map { ... }`.",
    "description": "Prefer `pluck` over `map { ... }`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_PluckId",
    "title": "Use `ids` instead of `pluck(:id)` or `pluck(primary_key)`.",
    "description": "Use `ids` instead of `pluck(:id)` or `pluck(primary_key)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_PluckInWhere",
    "title": "Use `select` instead of `pluck` in `where` query methods.",
    "description": "Use `select` instead of `pluck` in `where` query methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Rails_PluralizationGrammar",
    "title": "Checks for incorrect grammar when using methods like `3.day.ago`.",
    "description": "Checks for incorrect grammar when using methods like `3.day.ago`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Presence",
    "title": "Checks code that can be written more easily using `Object#presence` defined by Active Support.",
    "description": "Checks code that can be written more easily using `Object#presence` defined by Active Support.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Present",
    "title": "Enforces use of `present?`.",
    "description": "Enforces use of `present?`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "NotNilAndNotEmpty",
        "description": "NotNilAndNotEmpty"
      },
      {
        "name": "NotBlank",
        "description": "NotBlank"
      },
      {
        "name": "UnlessBlank",
        "description": "UnlessBlank"
      }
    ]
  },
  {
    "patternId": "Rails_RakeEnvironment",
    "title": "Include `:environment` as a dependency for all Rake tasks.",
    "description": "Include `:environment` as a dependency for all Rake tasks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Rails_ReadWriteAttribute",
    "title": "Checks for read_attribute(:attr) and write_attribute(:attr, val).",
    "description": "Checks for read_attribute(:attr) and write_attribute(:attr, val).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_RedundantActiveRecordAllMethod",
    "title": "Detect redundant `all` used as a receiver for Active Record query methods.",
    "description": "Detect redundant `all` used as a receiver for Active Record query methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowedReceivers",
        "description": "AllowedReceivers"
      }
    ]
  },
  {
    "patternId": "Rails_RedundantAllowNil",
    "title": "Finds redundant use of `allow_nil` when `allow_blank` is set to certain values in model validations.",
    "description": "Finds redundant use of `allow_nil` when `allow_blank` is set to certain values in model validations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_RedundantForeignKey",
    "title": "Checks for associations where the `:foreign_key` option is redundant.",
    "description": "Checks for associations where the `:foreign_key` option is redundant.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RedundantPresenceValidationOnBelongsTo",
    "title": "Checks for redundant presence validation on belongs_to association.",
    "description": "Checks for redundant presence validation on belongs_to association.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_RedundantReceiverInWithOptions",
    "title": "Checks for redundant receiver in `with_options`.",
    "description": "Checks for redundant receiver in `with_options`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RedundantTravelBack",
    "title": "Checks for redundant `travel_back` calls.",
    "description": "Checks for redundant `travel_back` calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ReflectionClassName",
    "title": "Use a string for `class_name` option value in the definition of a reflection.",
    "description": "Use a string for `class_name` option value in the definition of a reflection.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_RefuteMethods",
    "title": "Use `assert_not` methods instead of `refute` methods.",
    "description": "Use `assert_not` methods instead of `refute` methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_RelativeDateConstant",
    "title": "Do not assign relative date to constants.",
    "description": "Do not assign relative date to constants.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_RenderInline",
    "title": "Prefer using a template over inline rendering.",
    "description": "Prefer using a template over inline rendering.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RenderPlainText",
    "title": "Prefer `render plain:` over `render text:`.",
    "description": "Prefer `render plain:` over `render text:`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ContentTypeCompatibility",
        "description": "ContentTypeCompatibility"
      }
    ]
  },
  {
    "patternId": "Rails_RequestReferer",
    "title": "Use consistent syntax for request.referer.",
    "description": "Use consistent syntax for request.referer.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Rails_RequireDependency",
    "title": "Do not use `require_dependency` when running in Zeitwerk mode. `require_dependency` is for autoloading in classic mode.",
    "description": "Do not use `require_dependency` when running in Zeitwerk mode. `require_dependency` is for autoloading in classic mode.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ResponseParsedBody",
    "title": "Prefer `response.parsed_body` to custom parsing logic for `response.body`.",
    "description": "Prefer `response.parsed_body` to custom parsing logic for `response.body`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ReversibleMigration",
    "title": "Checks whether the change method of the migration file is reversible.",
    "description": "Checks whether the change method of the migration file is reversible.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ReversibleMigrationMethodDefinition",
    "title": "Checks whether the migration implements either a `change` method or both an `up` and a `down` method.",
    "description": "Checks whether the migration implements either a `change` method or both an `up` and a `down` method.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_RootJoinChain",
    "title": "Use a single `#join` instead of chaining on `Rails.root` or `Rails.public_path`.",
    "description": "Use a single `#join` instead of chaining on `Rails.root` or `Rails.public_path`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RootPathnameMethods",
    "title": "Use `Rails.root` IO methods instead of passing it to `File`.",
    "description": "Use `Rails.root` IO methods instead of passing it to `File`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_RootPublicPath",
    "title": "Favor `Rails.public_path` over `Rails.root` with `'public'`.",
    "description": "Favor `Rails.public_path` over `Rails.root` with `'public'`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SafeNavigation",
    "title": "Use Ruby's safe navigation operator (`&.`) instead of `try!`.",
    "description": "Use Ruby's safe navigation operator (`&.`) instead of `try!`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ConvertTry",
        "description": "ConvertTry"
      }
    ]
  },
  {
    "patternId": "Rails_SafeNavigationWithBlank",
    "title": "Avoid `foo&.blank?` in conditionals.",
    "description": "Avoid `foo&.blank?` in conditionals.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_SaveBang",
    "title": "Identifies possible cases where Active Record save! or related should be used.",
    "description": "Identifies possible cases where Active Record save! or related should be used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowImplicitReturn",
        "description": "AllowImplicitReturn"
      },
      {
        "name": "AllowedReceivers",
        "description": "AllowedReceivers"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_SchemaComment",
    "title": "Enforces the use of the `comment` option when adding a new table or column to the database during a migration.",
    "description": "Enforces the use of the `comment` option when adding a new table or column to the database during a migration.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ScopeArgs",
    "title": "Checks the arguments of ActiveRecord scopes.",
    "description": "Checks the arguments of ActiveRecord scopes.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_SelectMap",
    "title": "Checks for uses of `select(:column_name)` with `map(&:column_name)`.",
    "description": "Checks for uses of `select(:column_name)` with `map(&:column_name)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_ShortI18n",
    "title": "Use the short form of the I18n methods: `t` instead of `translate` and `l` instead of `localize`.",
    "description": "Use the short form of the I18n methods: `t` instead of `translate` and `l` instead of `localize`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Rails_SkipsModelValidations",
    "title": "Use methods that skips model validations with caution. See reference for more information.",
    "description": "Use methods that skips model validations with caution. See reference for more information.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ForbiddenMethods",
        "description": "ForbiddenMethods"
      },
      {
        "name": "AllowedMethods",
        "description": "AllowedMethods"
      }
    ]
  },
  {
    "patternId": "Rails_SquishedSQLHeredocs",
    "title": "Checks SQL heredocs to use `.squish`.",
    "description": "Checks SQL heredocs to use `.squish`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_StripHeredoc",
    "title": "Enforces the use of squiggly heredoc over `strip_heredoc`.",
    "description": "Enforces the use of squiggly heredoc over `strip_heredoc`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_TableNameAssignment",
    "title": "Do not use `self.table_name =`. Use Inflections or `table_name_prefix` instead.",
    "description": "Do not use `self.table_name =`. Use Inflections or `table_name_prefix` instead.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ThreeStateBooleanColumn",
    "title": "Add a default value and a `NOT NULL` constraint to boolean columns.",
    "description": "Add a default value and a `NOT NULL` constraint to boolean columns.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_TimeZone",
    "title": "Checks the correct usage of time zone aware methods.",
    "description": "Checks the correct usage of time zone aware methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Rails_TimeZoneAssignment",
    "title": "Prefer the usage of `Time.use_zone` instead of manually updating `Time.zone` value.",
    "description": "Prefer the usage of `Time.use_zone` instead of manually updating `Time.zone` value.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_ToFormattedS",
    "title": "Checks for consistent uses of `to_fs` or `to_formatted_s`.",
    "description": "Checks for consistent uses of `to_fs` or `to_formatted_s`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Rails_ToSWithArgument",
    "title": "Identifies passing any argument to `#to_s`.",
    "description": "Identifies passing any argument to `#to_s`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Rails_TopLevelHashWithIndifferentAccess",
    "title": "Identifies top-level `HashWithIndifferentAccess`.",
    "description": "Identifies top-level `HashWithIndifferentAccess`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Rails_TransactionExitStatement",
    "title": "Avoid the usage of `return`, `break` and `throw` in transaction blocks.",
    "description": "Avoid the usage of `return`, `break` and `throw` in transaction blocks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "TransactionMethods",
        "description": "TransactionMethods"
      }
    ]
  },
  {
    "patternId": "Rails_UniqBeforePluck",
    "title": "Prefer the use of uniq or distinct before pluck.",
    "description": "Prefer the use of uniq or distinct before pluck.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_UniqueValidationWithoutIndex",
    "title": "Uniqueness validation should have a unique index on the database column.",
    "description": "Uniqueness validation should have a unique index on the database column.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_UnknownEnv",
    "title": "Use correct environment name.",
    "description": "Use correct environment name.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Environments",
        "description": "Environments"
      }
    ]
  },
  {
    "patternId": "Rails_UnusedIgnoredColumns",
    "title": "Remove a column that does not exist from `ignored_columns`.",
    "description": "Remove a column that does not exist from `ignored_columns`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_UnusedRenderContent",
    "title": "Do not specify body content for a response with a non-content status code.",
    "description": "Do not specify body content for a response with a non-content status code.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Rails_Validation",
    "title": "Use validates :attribute, hash of validations.",
    "description": "Use validates :attribute, hash of validations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Rails_WhereEquals",
    "title": "Pass conditions to `where` as a hash instead of manually constructing SQL.",
    "description": "Pass conditions to `where` as a hash instead of manually constructing SQL.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Rails_WhereExists",
    "title": "Prefer `exists?(...)` over `where(...).exists?`.",
    "description": "Prefer `exists?(...)` over `where(...).exists?`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Rails_WhereMissing",
    "title": "Use `where.missing(...)` to find missing relationship records.",
    "description": "Use `where.missing(...)` to find missing relationship records.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_WhereNot",
    "title": "Use `where.not(...)` instead of manually constructing negated SQL in `where`.",
    "description": "Use `where.not(...)` instead of manually constructing negated SQL in `where`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_WhereNotWithMultipleConditions",
    "title": "Do not use `where.not(...)` with multiple conditions.",
    "description": "Do not use `where.not(...)` with multiple conditions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Sorbet_BindingConstantWithoutTypeAlias",
    "title": "Disallows binding the return value of `T.any`, `T.all`, `T.enum` to a constant directly. To bind the value, one must use `T.type_alias`.",
    "description": "Disallows binding the return value of `T.any`, `T.all`, `T.enum` to a constant directly. To bind the value, one must use `T.type_alias`.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_ConstantsFromStrings",
    "title": "Forbids constant access through meta-programming.\nFor example, things like `constantize` or `const_get` are forbidden.",
    "description": "Forbids constant access through meta-programming.\nFor example, things like `constantize` or `const_get` are forbidden.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_ForbidSuperclassConstLiteral",
    "title": "Forbid superclasses which are non-literal constants.",
    "description": "Forbid superclasses which are non-literal constants.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_ForbidIncludeConstLiteral",
    "title": "Forbids include of non-literal constants.",
    "description": "Forbids include of non-literal constants.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_ForbidTypeAliasedShapes",
    "title": "Forbids defining type aliases that contain shapes",
    "description": "Forbids defining type aliases that contain shapes",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_ForbidUntypedStructProps",
    "title": "Disallows use of `T.untyped` or `T.nilable(T.untyped)` as a prop type for `T::Struct` subclasses.",
    "description": "Disallows use of `T.untyped` or `T.nilable(T.untyped)` as a prop type for `T::Struct` subclasses.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_ImplicitConversionMethod",
    "title": "This cop disallows declaring implicit conversion methods, as sorbet does not support implicit conversion.",
    "description": "This cop disallows declaring implicit conversion methods, as sorbet does not support implicit conversion.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_OneAncestorPerLine",
    "title": "Enforces one ancestor per call to requires_ancestor",
    "description": "Enforces one ancestor per call to requires_ancestor",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_CallbackConditionalsBinding",
    "title": "Ensures callback conditionals are bound to the right type.",
    "description": "Ensures callback conditionals are bound to the right type.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Sorbet_ForbidTStruct",
    "title": "Forbid usage of T::Struct.",
    "description": "Forbid usage of T::Struct.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Sorbet_ForbidTUnsafe",
    "title": "Forbid usage of T.unsafe.",
    "description": "Forbid usage of T.unsafe.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_ForbidTUntyped",
    "title": "Forbid usage of T.untyped",
    "description": "Forbid usage of T.untyped",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_RedundantExtendTSig",
    "title": "Forbid the usage of redundant `extend T::Sig`.\nOnly for use in applications that monkey patch `Module.include(T::Sig)` directly, where it is useful to reduce noise.",
    "description": "Forbid the usage of redundant `extend T::Sig`.\nOnly for use in applications that monkey patch `Module.include(T::Sig)` directly, where it is useful to reduce noise.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Sorbet_TypeAliasName",
    "title": "Type alias constant names must be in CamelCase.",
    "description": "Type alias constant names must be in CamelCase.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_ObsoleteStrictMemoization",
    "title": "This cop checks for the obsolete pattern for initializing instance variables that was required for older Sorbet versions in `#typed: strict` files.\nIt's no longer required, as of Sorbet 0.5.10210 See https://sorbet.",
    "description": "This cop checks for the obsolete pattern for initializing instance variables that was required for older Sorbet versions in `#typed: strict` files.\nIt's no longer required, as of Sorbet 0.5.10210 See https://sorbet.org/docs/type-assertions#put-type-assertions-behind-memoization",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Sorbet_BuggyObsoleteStrictMemoization",
    "title": "Checks for the a mistaken variant of the \"obsolete memoization pattern\" that used to be required for older Sorbet versions in `#typed: strict` files.",
    "description": "Checks for the a mistaken variant of the \"obsolete memoization pattern\" that used to be required for older Sorbet versions in `#typed: strict` files. The mistaken variant would overwrite the ivar with `nil` on every call, causing the memoized value to be discarded and recomputed on every call.\nThis cop will correct it to read from the ivar instead of `nil`, which will memoize it correctly.\nThe result of this correction will be the \"obsolete memoization pattern\", which can further be corrected by the `Sorbet/ObsoleteStrictMemoization` cop.\nSee `Sorbet/ObsoleteStrictMemoization` for more details.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "Sorbet_ForbidExtendTSigHelpersInShims",
    "title": "Forbid the use of `extend T::Sig` and `extend T::Helpers` in RBI shims",
    "description": "Forbid the use of `extend T::Sig` and `extend T::Helpers` in RBI shims",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Sorbet_ForbidRBIOutsideOfAllowedPaths",
    "title": "Forbids RBI files outside of the allowed paths",
    "description": "Forbids RBI files outside of the allowed paths",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowedPaths",
        "description": "AllowedPaths"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Sorbet_SingleLineRbiClassModuleDefinitions",
    "title": "Empty class and module definitions in RBI must be on a single line.",
    "description": "Empty class and module definitions in RBI must be on a single line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "Sorbet_AllowIncompatibleOverride",
    "title": "Disallows using `.override(allow_incompatible: true)`.",
    "description": "Disallows using `.override(allow_incompatible: true)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_CheckedTrueInSignature",
    "title": "Disallows the usage of `checked(true)` in signatures.",
    "description": "Disallows the usage of `checked(true)` in signatures.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_VoidCheckedTests",
    "title": "Forbid `.void.checked(:tests)`",
    "description": "Forbid `.void.checked(:tests)`",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_KeywordArgumentOrdering",
    "title": "Enforces a compatible keyword arguments with Sorbet.\nAll keyword arguments must be at the end of the parameters list, and all keyword arguments with a default value must be after those without default values.",
    "description": "Enforces a compatible keyword arguments with Sorbet.\nAll keyword arguments must be at the end of the parameters list, and all keyword arguments with a default value must be after those without default values.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_SignatureBuildOrder",
    "title": "Enforces the order of parts in a signature.\nThe order is first inheritance related builders, then params, then return and finally the modifier such as: `abstract.params(...).returns(...).soft`.'",
    "description": "Enforces the order of parts in a signature.\nThe order is first inheritance related builders, then params, then return and finally the modifier such as: `abstract.params(...).returns(...).soft`.'",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Order",
        "description": "Order"
      }
    ]
  },
  {
    "patternId": "Sorbet_EnforceSignatures",
    "title": "Ensures all methods have a valid signature.",
    "description": "Ensures all methods have a valid signature.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_EmptyLineAfterSig",
    "title": "Ensures that there are no blank lines after signatures",
    "description": "Ensures that there are no blank lines after signatures",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_ValidSigil",
    "title": "All files must have a valid sigil.",
    "description": "All files must have a valid sigil.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "RequireSigilOnAllFiles",
        "description": "RequireSigilOnAllFiles"
      },
      {
        "name": "SuggestedStrictness",
        "description": "SuggestedStrictness"
      },
      {
        "name": "MinimumStrictness",
        "description": "MinimumStrictness"
      },
      {
        "name": "ExactStrictness",
        "description": "ExactStrictness"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_HasSigil",
    "title": "Makes the Sorbet typed sigil mandatory in all files.",
    "description": "Makes the Sorbet typed sigil mandatory in all files.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SuggestedStrictness",
        "description": "SuggestedStrictness"
      },
      {
        "name": "MinimumStrictness",
        "description": "MinimumStrictness"
      },
      {
        "name": "ExactStrictness",
        "description": "ExactStrictness"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_IgnoreSigil",
    "title": "All files must be at least at strictness `ignore`.",
    "description": "All files must be at least at strictness `ignore`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SuggestedStrictness",
        "description": "SuggestedStrictness"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_FalseSigil",
    "title": "All files must be at least at strictness `false`.",
    "description": "All files must be at least at strictness `false`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SuggestedStrictness",
        "description": "SuggestedStrictness"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_TrueSigil",
    "title": "All files must be at least at strictness `true`.",
    "description": "All files must be at least at strictness `true`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SuggestedStrictness",
        "description": "SuggestedStrictness"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_StrictSigil",
    "title": "All files must be at least at strictness `strict`.",
    "description": "All files must be at least at strictness `strict`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SuggestedStrictness",
        "description": "SuggestedStrictness"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_StrongSigil",
    "title": "All files must be at least at strictness `strong`.",
    "description": "All files must be at least at strictness `strong`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SuggestedStrictness",
        "description": "SuggestedStrictness"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "Sorbet_EnforceSigilOrder",
    "title": "Ensures that Sorbet sigil comes first in a file.",
    "description": "Ensures that Sorbet sigil comes first in a file.",
    "timeToFix": 5
  },
  {
    "patternId": "Sorbet_EnforceSingleSigil",
    "title": "Ensures that there is only one Sorbet sigil in a file.",
    "description": "Ensures that there is only one Sorbet sigil in a file.",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_ArgumentDescription",
    "title": "Ensures all arguments have a description",
    "description": "Ensures all arguments have a description",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_ArgumentName",
    "title": "This cop checks whether argument names are snake_case",
    "description": "This cop checks whether argument names are snake_case",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_ArgumentUniqueness",
    "title": "This cop enforces arguments to be defined once per block",
    "description": "This cop enforces arguments to be defined once per block",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_ExtractInputType",
    "title": "Suggests using input type instead of many arguments",
    "description": "Suggests using input type instead of many arguments",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MaxArguments",
        "description": "MaxArguments"
      },
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "GraphQL_ExtractType",
    "title": "Suggests extracting fields with common prefixes to the separate type",
    "description": "Suggests extracting fields with common prefixes to the separate type",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MaxFields",
        "description": "MaxFields"
      },
      {
        "name": "Prefixes",
        "description": "Prefixes"
      }
    ]
  },
  {
    "patternId": "GraphQL_FieldDefinitions",
    "title": "Checks consistency of field definitions",
    "description": "Checks consistency of field definitions",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "GraphQL_FieldDescription",
    "title": "Ensures all fields have a description",
    "description": "Ensures all fields have a description",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_FieldHashKey",
    "title": "Checks :hash_key option is used for appropriate fields",
    "description": "Checks :hash_key option is used for appropriate fields",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_FieldMethod",
    "title": "Checks :method option is used for appropriate fields",
    "description": "Checks :method option is used for appropriate fields",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_FieldName",
    "title": "This cop checks whether field names are snake_case",
    "description": "This cop checks whether field names are snake_case",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "GraphQL_FieldUniqueness",
    "title": "This cop enforces fields to be defined once",
    "description": "This cop enforces fields to be defined once",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_GraphqlName",
    "title": "This cop check proper configuration of graphql_name",
    "description": "This cop check proper configuration of graphql_name",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "GraphQL_LegacyDsl",
    "title": "Checks that types are defined with class-based API",
    "description": "Checks that types are defined with class-based API",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_MaxComplexitySchema",
    "title": "Enforces max_complexity configuration in schema",
    "description": "Enforces max_complexity configuration in schema",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "GraphQL_MaxDepthSchema",
    "title": "Enforces max_depth configuration in schema",
    "description": "Enforces max_depth configuration in schema",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "GraphQL_MultipleFieldDefinitions",
    "title": "Ensures that fields with multiple definitions are grouped together",
    "description": "Ensures that fields with multiple definitions are grouped together",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_NotAuthorizedNodeType",
    "title": "Detects types that implement Node interface and not have `.authorized?` check",
    "description": "Detects types that implement Node interface and not have `.authorized?` check",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "SafeBaseClasses",
        "description": "SafeBaseClasses"
      }
    ]
  },
  {
    "patternId": "GraphQL_ResolverMethodLength",
    "title": "Checks resolver methods are not too long",
    "description": "Checks resolver methods are not too long",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "CountComments",
        "description": "CountComments"
      },
      {
        "name": "ExcludedMethods",
        "description": "ExcludedMethods"
      },
      {
        "name": "CountAsOne",
        "description": "CountAsOne"
      }
    ]
  },
  {
    "patternId": "GraphQL_ObjectDescription",
    "title": "Ensures all types have a description",
    "description": "Ensures all types have a description",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "GraphQL_PrepareMethod",
    "title": "Prepare Method",
    "description": "Prepare Method",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_UnusedArgument",
    "title": "Arguments should either be listed explicitly or **rest should be in the resolve signature",
    "description": "Arguments should either be listed explicitly or **rest should be in the resolve signature",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_UnnecessaryArgumentCamelize",
    "title": "Camelize isn't necessary if the argument name doesn't contain underscores",
    "description": "Camelize isn't necessary if the argument name doesn't contain underscores",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_UnnecessaryFieldAlias",
    "title": "Field aliases should be different than their field names",
    "description": "Field aliases should be different than their field names",
    "timeToFix": 5
  },
  {
    "patternId": "GraphQL_UnnecessaryFieldCamelize",
    "title": "Camelize isn't necessary if the field name doesn't contain underscores",
    "description": "Camelize isn't necessary if the field name doesn't contain underscores",
    "timeToFix": 5
  },
  {
    "patternId": "ThreadSafety_InstanceVariableInClassMethod",
    "title": "Avoid using instance variables in class methods.",
    "description": "Avoid using instance variables in class methods.",
    "timeToFix": 5
  },
  {
    "patternId": "ThreadSafety_ClassAndModuleAttributes",
    "title": "Avoid mutating class and module attributes.",
    "description": "Avoid mutating class and module attributes.",
    "timeToFix": 5
  },
  {
    "patternId": "ThreadSafety_MutableClassInstanceVariable",
    "title": "Do not assign mutable objects to class instance variables.",
    "description": "Do not assign mutable objects to class instance variables.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "ThreadSafety_NewThread",
    "title": "Avoid starting new threads. Let a framework like Sidekiq handle the threads.",
    "description": "Avoid starting new threads. Let a framework like Sidekiq handle the threads.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertEmpty",
    "title": "This cop enforces the test to use `assert_empty` instead of using `assert(object.empty?)`.",
    "description": "This cop enforces the test to use `assert_empty` instead of using `assert(object.empty?)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertEmptyLiteral",
    "title": "This cop enforces the test to use `assert_empty` instead of using `assert_equal([], object)`.",
    "description": "This cop enforces the test to use `assert_empty` instead of using `assert_equal([], object)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertEqual",
    "title": "This cop enforces the test to use `assert_equal` instead of using `assert(expected == actual)`.",
    "description": "This cop enforces the test to use `assert_equal` instead of using `assert(expected == actual)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertInDelta",
    "title": "This cop enforces the test to use `assert_in_delta` instead of using `assert_equal` to compare floats.",
    "description": "This cop enforces the test to use `assert_in_delta` instead of using `assert_equal` to compare floats.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertOperator",
    "title": "This cop enforces the use of `assert_operator(expected, :<, actual)` over `assert(expected < actual)`.",
    "description": "This cop enforces the use of `assert_operator(expected, :<, actual)` over `assert(expected < actual)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertPredicate",
    "title": "This cop enforces the test to use `assert_predicate` instead of using `assert(obj.a_predicate_method?)`.",
    "description": "This cop enforces the test to use `assert_predicate` instead of using `assert(obj.a_predicate_method?)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertRaisesCompoundBody",
    "title": "This cop enforces the block body of `assert_raises { ... }` to be reduced to only the raising code.",
    "description": "This cop enforces the block body of `assert_raises { ... }` to be reduced to only the raising code.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertRaisesWithRegexpArgument",
    "title": "This cop enforces checks for regular expression literals passed to `assert_raises`.",
    "description": "This cop enforces checks for regular expression literals passed to `assert_raises`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Minitest_AssertWithExpectedArgument",
    "title": "This cop tries to detect when a user accidentally used `assert` when they meant to use `assert_equal`.",
    "description": "This cop tries to detect when a user accidentally used `assert` when they meant to use `assert_equal`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Minitest_AssertionInLifecycleHook",
    "title": "This cop checks for usage of assertions in lifecycle hooks.",
    "description": "This cop checks for usage of assertions in lifecycle hooks.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertKindOf",
    "title": "This cop enforces the test to use `assert_kind_of(Class, object)` over `assert(object.kind_of?(Class))`",
    "description": "This cop enforces the test to use `assert_kind_of(Class, object)` over `assert(object.kind_of?(Class))`",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertNil",
    "title": "This cop enforces the test to use `assert_nil` instead of using `assert_equal(nil, something)` or `assert(something.nil?)`.",
    "description": "This cop enforces the test to use `assert_nil` instead of using `assert_equal(nil, something)` or `assert(something.nil?)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertIncludes",
    "title": "This cop enforces the test to use `assert_includes` instead of using `assert(collection.include?(object))`.",
    "description": "This cop enforces the test to use `assert_includes` instead of using `assert(collection.include?(object))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertInstanceOf",
    "title": "This cop enforces the test to use `assert_instance_of(Class, object)` over `assert(object.instance_of?(Class))`",
    "description": "This cop enforces the test to use `assert_instance_of(Class, object)` over `assert(object.instance_of?(Class))`",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertMatch",
    "title": "This cop enforces the test to use `assert_match` instead of using `assert(matcher.match(object))`.",
    "description": "This cop enforces the test to use `assert_match` instead of using `assert(matcher.match(object))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertOutput",
    "title": "This cop checks for opportunities to use `assert_output`.",
    "description": "This cop checks for opportunities to use `assert_output`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertPathExists",
    "title": "This cop enforces the test to use `assert_path_exists` instead of using `assert(File.exist?(path))`.",
    "description": "This cop enforces the test to use `assert_path_exists` instead of using `assert(File.exist?(path))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertRespondTo",
    "title": "This cop enforces the test to use `assert_respond_to(object, :do_something)` over `assert(object.respond_to?(:do_something))`.",
    "description": "This cop enforces the test to use `assert_respond_to(object, :do_something)` over `assert(object.respond_to?(:do_something))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertSame",
    "title": "Enforces the use of `assert_same(expected, actual)` over `assert(expected.equal?(actual))`.",
    "description": "Enforces the use of `assert_same(expected, actual)` over `assert(expected.equal?(actual))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertSilent",
    "title": "This cop enforces the test to use `assert_silent { ... }` instead of using `assert_output('', '') { ... }`.",
    "description": "This cop enforces the test to use `assert_silent { ... }` instead of using `assert_output('', '') { ... }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_AssertTruthy",
    "title": "This cop enforces the test to use `assert(actual)` instead of using `assert_equal(true, actual)`.",
    "description": "This cop enforces the test to use `assert(actual)` instead of using `assert_equal(true, actual)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Minitest_DuplicateTestRun",
    "title": "This cop detects duplicate test runs caused by one test class inheriting from another.",
    "description": "This cop detects duplicate test runs caused by one test class inheriting from another.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_EmptyLineBeforeAssertionMethods",
    "title": "Add empty line before assertion methods.",
    "description": "Add empty line before assertion methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_Focus",
    "title": "Checks for focused tests.",
    "description": "Checks for focused tests.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AutoCorrect",
        "description": "AutoCorrect"
      }
    ]
  },
  {
    "patternId": "Minitest_NonExecutableTestMethod",
    "title": "Checks uses of test methods outside test class.",
    "description": "Checks uses of test methods outside test class.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Minitest_RedundantMessageArgument",
    "title": "Detects redundant message argument in assertion methods.",
    "description": "Detects redundant message argument in assertion methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_ReturnInTestMethod",
    "title": "Enforces the use of `skip` instead of `return` in test methods.",
    "description": "Enforces the use of `skip` instead of `return` in test methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_TestFileName",
    "title": "Checks if test file names start with `test_` or end with `_test.rb`.",
    "description": "Checks if test file names start with `test_` or end with `_test.rb`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_GlobalExpectations",
    "title": "This cop checks for deprecated global expectations.",
    "description": "This cop checks for deprecated global expectations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Minitest_LifecycleHooksOrder",
    "title": "Checks that lifecycle hooks are declared in the order in which they will be executed.",
    "description": "Checks that lifecycle hooks are declared in the order in which they will be executed.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_LiteralAsActualArgument",
    "title": "This cop enforces correct order of `expected` and `actual` arguments for `assert_equal`.",
    "description": "This cop enforces correct order of `expected` and `actual` arguments for `assert_equal`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_MultipleAssertions",
    "title": "This cop checks if test cases contain too many assertion calls.",
    "description": "This cop checks if test cases contain too many assertion calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      }
    ]
  },
  {
    "patternId": "Minitest_NoAssertions",
    "title": "This cop checks for at least one assertion (or flunk) in tests.",
    "description": "This cop checks for at least one assertion (or flunk) in tests.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_NoTestCases",
    "title": "Checks if test class contains any test cases.",
    "description": "Checks if test class contains any test cases.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_NonPublicTestMethod",
    "title": "Detects non `public` (marked as `private` or `protected`) test methods.",
    "description": "Detects non `public` (marked as `private` or `protected`) test methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Minitest_RefuteEmpty",
    "title": "This cop enforces to use `refute_empty` instead of using `refute(object.empty?)`.",
    "description": "This cop enforces to use `refute_empty` instead of using `refute(object.empty?)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteFalse",
    "title": "Check if your test uses `refute(actual)` instead of `assert_equal(false, actual)`.",
    "description": "Check if your test uses `refute(actual)` instead of `assert_equal(false, actual)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "Minitest_RefuteEqual",
    "title": "Check if your test uses `refute_equal` instead of `assert(expected != object)` or `assert(! expected == object))`.",
    "description": "Check if your test uses `refute_equal` instead of `assert(expected != object)` or `assert(! expected == object))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteInDelta",
    "title": "This cop enforces the test to use `refute_in_delta` instead of using `refute_equal` to compare floats.",
    "description": "This cop enforces the test to use `refute_in_delta` instead of using `refute_equal` to compare floats.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteIncludes",
    "title": "This cop enforces the test to use `refute_includes` instead of using `refute(collection.include?(object))`.",
    "description": "This cop enforces the test to use `refute_includes` instead of using `refute(collection.include?(object))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteInstanceOf",
    "title": "This cop enforces the test to use `refute_instance_of(Class, object)` over `refute(object.instance_of?(Class))`.",
    "description": "This cop enforces the test to use `refute_instance_of(Class, object)` over `refute(object.instance_of?(Class))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteKindOf",
    "title": "This cop enforces the test to use `refute_kind_of(Class, object)` over `refute(object.kind_of?(Class))`.",
    "description": "This cop enforces the test to use `refute_kind_of(Class, object)` over `refute(object.kind_of?(Class))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteMatch",
    "title": "This cop enforces the test to use `refute_match` instead of using `refute(matcher.match(object))`.",
    "description": "This cop enforces the test to use `refute_match` instead of using `refute(matcher.match(object))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteNil",
    "title": "This cop enforces the test to use `refute_nil` instead of using `refute_equal(nil, something)` or `refute(something.nil?)`.",
    "description": "This cop enforces the test to use `refute_nil` instead of using `refute_equal(nil, something)` or `refute(something.nil?)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteOperator",
    "title": "This cop enforces the use of `refute_operator(expected, :<, actual)` over `refute(expected < actual)`.",
    "description": "This cop enforces the use of `refute_operator(expected, :<, actual)` over `refute(expected < actual)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefutePathExists",
    "title": "This cop enforces the test to use `refute_path_exists` instead of using `refute(File.exist?(path))`.",
    "description": "This cop enforces the test to use `refute_path_exists` instead of using `refute(File.exist?(path))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefutePredicate",
    "title": "This cop enforces the test to use `refute_predicate` instead of using `refute(obj.a_predicate_method?)`.",
    "description": "This cop enforces the test to use `refute_predicate` instead of using `refute(obj.a_predicate_method?)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteRespondTo",
    "title": "This cop enforces the test to use `refute_respond_to(object, :do_something)` over `refute(object.respond_to?(:do_something))`.",
    "description": "This cop enforces the test to use `refute_respond_to(object, :do_something)` over `refute(object.respond_to?(:do_something))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_RefuteSame",
    "title": "Enforces the use of `refute_same(expected, actual)` over `refute(expected.equal?(actual))`.",
    "description": "Enforces the use of `refute_same(expected, actual)` over `refute(expected.equal?(actual))`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_SkipEnsure",
    "title": "Checks that `ensure` call even if `skip`.",
    "description": "Checks that `ensure` call even if `skip`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Minitest_SkipWithoutReason",
    "title": "Checks for skipped tests missing the skipping reason.",
    "description": "Checks for skipped tests missing the skipping reason.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_TestMethodName",
    "title": "This cop enforces that test method names start with `test_` prefix.",
    "description": "This cop enforces that test method names start with `test_` prefix.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_UnreachableAssertion",
    "title": "This cop checks for an `assert_raises` block containing any unreachable assertions.",
    "description": "This cop checks for an `assert_raises` block containing any unreachable assertions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Severity",
        "description": "Severity"
      }
    ]
  },
  {
    "patternId": "Minitest_UnspecifiedException",
    "title": "This cop checks for a specified error in `assert_raises`.",
    "description": "This cop checks for a specified error in `assert_raises`.",
    "timeToFix": 5
  },
  {
    "patternId": "Minitest_UselessAssertion",
    "title": "Detects useless assertions (assertions that either always pass or always fail).",
    "description": "Detects useless assertions (assertions that either always pass or always fail).",
    "timeToFix": 5
  },
  {
    "patternId": "Rake_ClassDefinitionInTask",
    "title": "Do not define a class or module in rake task, because it will be defined to the top level.",
    "description": "Do not define a class or module in rake task, because it will be defined to the top level.",
    "timeToFix": 5
  },
  {
    "patternId": "Rake_Desc",
    "title": "Describe the task with `desc` method.",
    "description": "Describe the task with `desc` method.",
    "timeToFix": 5
  },
  {
    "patternId": "Rake_DuplicateTask",
    "title": "Do not define tasks with the same name",
    "description": "Do not define tasks with the same name",
    "timeToFix": 5
  },
  {
    "patternId": "Rake_DuplicateNamespace",
    "title": "Do not define namespace with the same name",
    "description": "Do not define namespace with the same name",
    "timeToFix": 5
  },
  {
    "patternId": "Rake_MethodDefinitionInTask",
    "title": "Do not define a method in rake task, because it will be defined to the top level.",
    "description": "Do not define a method in rake task, because it will be defined to the top level.",
    "timeToFix": 5
  },
  {
    "patternId": "Capybara_RSpec_HaveSelector",
    "title": "Use `have_css` or `have_xpath` instead of `have_selector`.",
    "description": "Use `have_css` or `have_xpath` instead of `have_selector`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "DefaultSelector",
        "description": "DefaultSelector"
      }
    ]
  },
  {
    "patternId": "Capybara_RSpec_PredicateMatcher",
    "title": "Prefer using predicate matcher over using predicate method directly.",
    "description": "Prefer using predicate matcher over using predicate method directly.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Strict",
        "description": "Strict"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "AllowedExplicitMatchers",
        "description": "AllowedExplicitMatchers"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Capybara_ClickLinkOrButtonStyle",
    "title": "Checks for methods of button or link clicks.",
    "description": "Checks for methods of button or link clicks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Capybara_CurrentPathExpectation",
    "title": "Checks that no expectations are set on Capybara's `current_path`.",
    "description": "Checks that no expectations are set on Capybara's `current_path`.",
    "timeToFix": 5
  },
  {
    "patternId": "Capybara_MatchStyle",
    "title": "Checks for usage of deprecated style methods.",
    "description": "Checks for usage of deprecated style methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Capybara_NegationMatcher",
    "title": "Enforces use of `have_no_*` or `not_to` for negated expectations.",
    "description": "Enforces use of `have_no_*` or `not_to` for negated expectations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "Capybara_RedundantWithinFind",
    "title": "Checks for redundant `within find(...)` calls.",
    "description": "Checks for redundant `within find(...)` calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Capybara_SpecificActions",
    "title": "Checks for there is a more specific actions offered by Capybara.",
    "description": "Checks for there is a more specific actions offered by Capybara.",
    "timeToFix": 5
  },
  {
    "patternId": "Capybara_SpecificFinders",
    "title": "Checks if there is a more specific finder offered by Capybara.",
    "description": "Checks if there is a more specific finder offered by Capybara.",
    "timeToFix": 5
  },
  {
    "patternId": "Capybara_SpecificMatcher",
    "title": "Checks for there is a more specific matcher offered by Capybara.",
    "description": "Checks for there is a more specific matcher offered by Capybara.",
    "timeToFix": 5
  },
  {
    "patternId": "Capybara_VisibilityMatcher",
    "title": "Checks for boolean visibility in Capybara finders.",
    "description": "Checks for boolean visibility in Capybara finders.",
    "timeToFix": 5
  },
  {
    "patternId": "FactoryBot_AssociationStyle",
    "title": "Use a consistent style to define associations.",
    "description": "Use a consistent style to define associations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "NonImplicitAssociationMethodNames",
        "description": "NonImplicitAssociationMethodNames"
      }
    ]
  },
  {
    "patternId": "FactoryBot_AttributeDefinedStatically",
    "title": "Always declare attribute values as blocks.",
    "description": "Always declare attribute values as blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "FactoryBot_ConsistentParenthesesStyle",
    "title": "Use a consistent style for parentheses in factory_bot calls.",
    "description": "Use a consistent style for parentheses in factory_bot calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "ExplicitOnly",
        "description": "ExplicitOnly"
      }
    ]
  },
  {
    "patternId": "FactoryBot_CreateList",
    "title": "Checks for create_list usage.",
    "description": "Checks for create_list usage.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "ExplicitOnly",
        "description": "ExplicitOnly"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "FactoryBot_ExcessiveCreateList",
    "title": "Check for excessive model creation in a list.",
    "description": "Check for excessive model creation in a list.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "MaxAmount",
        "description": "MaxAmount"
      }
    ]
  },
  {
    "patternId": "FactoryBot_FactoryAssociationWithStrategy",
    "title": "Use definition in factory association instead of hard coding a strategy.",
    "description": "Use definition in factory association instead of hard coding a strategy.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "FactoryBot_FactoryClassName",
    "title": "Use string value when setting the class attribute explicitly.",
    "description": "Use string value when setting the class attribute explicitly.",
    "timeToFix": 5
  },
  {
    "patternId": "FactoryBot_FactoryNameStyle",
    "title": "Checks for name style for argument of FactoryBot::Syntax::Methods.",
    "description": "Checks for name style for argument of FactoryBot::Syntax::Methods.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "ExplicitOnly",
        "description": "ExplicitOnly"
      }
    ]
  },
  {
    "patternId": "FactoryBot_IdSequence",
    "title": "Do not create a FactoryBot sequence for an id column.",
    "description": "Do not create a FactoryBot sequence for an id column.",
    "timeToFix": 5
  },
  {
    "patternId": "FactoryBot_RedundantFactoryOption",
    "title": "Checks for redundant `factory` option.",
    "description": "Checks for redundant `factory` option.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "FactoryBot_SyntaxMethods",
    "title": "Use shorthands from `FactoryBot::Syntax::Methods` in your specs.",
    "description": "Use shorthands from `FactoryBot::Syntax::Methods` in your specs.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "RSpecRails_AvoidSetupHook",
    "title": "Checks that tests use RSpec `before` hook over Rails `setup` method.",
    "description": "Checks that tests use RSpec `before` hook over Rails `setup` method.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpecRails_HaveHttpStatus",
    "title": "Checks that tests use `have_http_status` instead of equality matchers.",
    "description": "Checks that tests use `have_http_status` instead of equality matchers.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "ResponseMethods",
        "description": "ResponseMethods"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "RSpecRails_HttpStatus",
    "title": "Enforces use of symbolic or numeric value to describe HTTP status.",
    "description": "Enforces use of symbolic or numeric value to describe HTTP status.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpecRails_InferredSpecType",
    "title": "Identifies redundant spec type.",
    "description": "Identifies redundant spec type.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "Inferences",
        "description": "Inferences"
      }
    ]
  },
  {
    "patternId": "RSpecRails_MinitestAssertions",
    "title": "Check if using Minitest-like matchers.",
    "description": "Check if using Minitest-like matchers.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpecRails_NegationBeValid",
    "title": "Enforces use of `be_invalid` or `not_to` for negated be_valid.",
    "description": "Enforces use of `be_invalid` or `not_to` for negated be_valid.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpecRails_TravelAround",
    "title": "Prefer to travel in `before` rather than `around`.",
    "description": "Prefer to travel in `before` rather than `around`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "RSpec_Capybara_FeatureMethods",
    "title": "Checks for consistent method usage in feature specs.",
    "description": "Checks for consistent method usage in feature specs.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnabledMethods",
        "description": "EnabledMethods"
      }
    ]
  },
  {
    "patternId": "RSpec_AlignLeftLetBrace",
    "title": "Checks that left braces for adjacent single line lets are aligned.",
    "description": "Checks that left braces for adjacent single line lets are aligned.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_AlignRightLetBrace",
    "title": "Checks that right braces for adjacent single line lets are aligned.",
    "description": "Checks that right braces for adjacent single line lets are aligned.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_AnyInstance",
    "title": "Check that instances are not being stubbed globally.",
    "description": "Check that instances are not being stubbed globally.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_AroundBlock",
    "title": "Checks that around blocks actually run the test.",
    "description": "Checks that around blocks actually run the test.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_Be",
    "title": "Check for expectations where `be` is used without argument.",
    "description": "Check for expectations where `be` is used without argument.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_BeEmpty",
    "title": "Prefer using `be_empty` when checking for an empty array.",
    "description": "Prefer using `be_empty` when checking for an empty array.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_BeEq",
    "title": "Check for expectations where `be(...)` can replace `eq(...)`.",
    "description": "Check for expectations where `be(...)` can replace `eq(...)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "RSpec_BeEql",
    "title": "Check for expectations where `be(...)` can replace `eql(...)`.",
    "description": "Check for expectations where `be(...)` can replace `eql(...)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      }
    ]
  },
  {
    "patternId": "RSpec_BeNil",
    "title": "Ensures a consistent style is used when matching `nil`.",
    "description": "Ensures a consistent style is used when matching `nil`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_BeforeAfterAll",
    "title": "Check that before/after(:all/:context) isn't being used.",
    "description": "Check that before/after(:all/:context) isn't being used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "RSpec_ChangeByZero",
    "title": "Prefer negated matchers over `to change.by(0)`.",
    "description": "Prefer negated matchers over `to change.by(0)`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "NegatedMatcher",
        "description": "NegatedMatcher"
      }
    ]
  },
  {
    "patternId": "RSpec_ClassCheck",
    "title": "Enforces consistent use of `be_a` or `be_kind_of`.",
    "description": "Enforces consistent use of `be_a` or `be_kind_of`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_ContainExactly",
    "title": "Checks where `contain_exactly` is used.",
    "description": "Checks where `contain_exactly` is used.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ContextMethod",
    "title": "`context` should not be used for specifying methods.",
    "description": "`context` should not be used for specifying methods.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ContextWording",
    "title": "Checks that `context` docstring starts with an allowed prefix.",
    "description": "Checks that `context` docstring starts with an allowed prefix.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Prefixes",
        "description": "Prefixes"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "RSpec_DescribeClass",
    "title": "Check that the first argument to the top-level describe is a constant.",
    "description": "Check that the first argument to the top-level describe is a constant.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      },
      {
        "name": "IgnoredMetadata",
        "description": "IgnoredMetadata"
      }
    ]
  },
  {
    "patternId": "RSpec_DescribeMethod",
    "title": "Checks that the second argument to `describe` specifies a method.",
    "description": "Checks that the second argument to `describe` specifies a method.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_DescribeSymbol",
    "title": "Avoid describing symbols.",
    "description": "Avoid describing symbols.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_DescribedClass",
    "title": "Checks that tests use `described_class`.",
    "description": "Checks that tests use `described_class`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SkipBlocks",
        "description": "SkipBlocks"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "OnlyStaticConstants",
        "description": "OnlyStaticConstants"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "RSpec_DescribedClassModuleWrapping",
    "title": "Avoid opening modules and defining specs within them.",
    "description": "Avoid opening modules and defining specs within them.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_Dialect",
    "title": "Enforces custom RSpec dialects.",
    "description": "Enforces custom RSpec dialects.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "PreferredMethods",
        "description": "PreferredMethods"
      }
    ]
  },
  {
    "patternId": "RSpec_DuplicatedMetadata",
    "title": "Avoid duplicated metadata.",
    "description": "Avoid duplicated metadata.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_EmptyExampleGroup",
    "title": "Checks if an example group does not include any tests.",
    "description": "Checks if an example group does not include any tests.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "RSpec_EmptyHook",
    "title": "Checks for empty before and after hooks.",
    "description": "Checks for empty before and after hooks.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_EmptyLineAfterExample",
    "title": "Checks if there is an empty line after example blocks.",
    "description": "Checks if there is an empty line after example blocks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowConsecutiveOneLiners",
        "description": "AllowConsecutiveOneLiners"
      }
    ]
  },
  {
    "patternId": "RSpec_EmptyLineAfterExampleGroup",
    "title": "Checks if there is an empty line after example group blocks.",
    "description": "Checks if there is an empty line after example group blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_EmptyLineAfterFinalLet",
    "title": "Checks if there is an empty line after the last let block.",
    "description": "Checks if there is an empty line after the last let block.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_EmptyLineAfterHook",
    "title": "Checks if there is an empty line after hook blocks.",
    "description": "Checks if there is an empty line after hook blocks.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowConsecutiveOneLiners",
        "description": "AllowConsecutiveOneLiners"
      }
    ]
  },
  {
    "patternId": "RSpec_EmptyLineAfterSubject",
    "title": "Checks if there is an empty line after subject block.",
    "description": "Checks if there is an empty line after subject block.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_EmptyMetadata",
    "title": "Avoid empty metadata hash.",
    "description": "Avoid empty metadata hash.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_EmptyOutput",
    "title": "Check that the `output` matcher is not called with an empty string.",
    "description": "Check that the `output` matcher is not called with an empty string.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_Eq",
    "title": "Use `eq` instead of `be ==` to compare objects.",
    "description": "Use `eq` instead of `be ==` to compare objects.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ExampleLength",
    "title": "Checks for long examples.",
    "description": "Checks for long examples.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "CountAsOne",
        "description": "CountAsOne"
      }
    ]
  },
  {
    "patternId": "RSpec_ExampleWithoutDescription",
    "title": "Checks for examples without a description.",
    "description": "Checks for examples without a description.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_ExampleWording",
    "title": "Checks for common mistakes in example descriptions.",
    "description": "Checks for common mistakes in example descriptions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "CustomTransform",
        "description": "CustomTransform"
      },
      {
        "name": "IgnoredWords",
        "description": "IgnoredWords"
      },
      {
        "name": "DisallowedExamples",
        "description": "DisallowedExamples"
      }
    ]
  },
  {
    "patternId": "RSpec_ExcessiveDocstringSpacing",
    "title": "Checks for excessive whitespace in example descriptions.",
    "description": "Checks for excessive whitespace in example descriptions.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ExpectActual",
    "title": "Checks for `expect(...)` calls containing literal values.",
    "description": "Checks for `expect(...)` calls containing literal values.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "Exclude"
      }
    ]
  },
  {
    "patternId": "RSpec_ExpectChange",
    "title": "Checks for consistent style of change matcher.",
    "description": "Checks for consistent style of change matcher.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "RSpec_ExpectInHook",
    "title": "Do not use `expect` in hooks such as `before`.",
    "description": "Do not use `expect` in hooks such as `before`.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ExpectOutput",
    "title": "Checks for opportunities to use `expect { ... }.to output`.",
    "description": "Checks for opportunities to use `expect { ... }.to output`.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_FilePath",
    "title": "Checks that spec file paths are consistent and well-formed.",
    "description": "Checks that spec file paths are consistent and well-formed.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "CustomTransform",
        "description": "CustomTransform"
      },
      {
        "name": "IgnoreMethods",
        "description": "IgnoreMethods"
      },
      {
        "name": "SpecSuffixOnly",
        "description": "SpecSuffixOnly"
      }
    ]
  },
  {
    "patternId": "RSpec_Focus",
    "title": "Checks if examples are focused.",
    "description": "Checks if examples are focused.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_HookArgument",
    "title": "Checks the arguments passed to `before`, `around`, and `after`.",
    "description": "Checks the arguments passed to `before`, `around`, and `after`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_HooksBeforeExamples",
    "title": "Checks for before/around/after hooks that come after an example.",
    "description": "Checks for before/around/after hooks that come after an example.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_IdenticalEqualityAssertion",
    "title": "Checks for equality assertions with identical expressions on both sides.",
    "description": "Checks for equality assertions with identical expressions on both sides.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ImplicitBlockExpectation",
    "title": "Check that implicit block expectation syntax is not used.",
    "description": "Check that implicit block expectation syntax is not used.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ImplicitExpect",
    "title": "Check that a consistent implicit expectation style is used.",
    "description": "Check that a consistent implicit expectation style is used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_ImplicitSubject",
    "title": "Checks for usage of implicit subject (`is_expected` / `should`).",
    "description": "Checks for usage of implicit subject (`is_expected` / `should`).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_IndexedLet",
    "title": "Do not set up test data using indexes (e.g., `item_1`, `item_2`).",
    "description": "Do not set up test data using indexes (e.g., `item_1`, `item_2`).",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "AllowedIdentifiers",
        "description": "AllowedIdentifiers"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "RSpec_InstanceSpy",
    "title": "Checks for `instance_double` used with `have_received`.",
    "description": "Checks for `instance_double` used with `have_received`.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_InstanceVariable",
    "title": "Checks for instance variable usage in specs.",
    "description": "Checks for instance variable usage in specs.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AssignmentOnly",
        "description": "AssignmentOnly"
      }
    ]
  },
  {
    "patternId": "RSpec_IsExpectedSpecify",
    "title": "Check for `specify` with `is_expected` and one-liner expectations.",
    "description": "Check for `specify` with `is_expected` and one-liner expectations.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ItBehavesLike",
    "title": "Checks that only one `it_behaves_like` style is used.",
    "description": "Checks that only one `it_behaves_like` style is used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_IteratedExpectation",
    "title": "Check that `all` matcher is used instead of iterating over an array.",
    "description": "Check that `all` matcher is used instead of iterating over an array.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_LeadingSubject",
    "title": "Enforce that subject is the first definition in the test.",
    "description": "Enforce that subject is the first definition in the test.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_LeakyConstantDeclaration",
    "title": "Checks that no class, module, or constant is declared.",
    "description": "Checks that no class, module, or constant is declared.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_LetBeforeExamples",
    "title": "Checks for `let` definitions that come after an example.",
    "description": "Checks for `let` definitions that come after an example.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_LetSetup",
    "title": "Checks unreferenced `let!` calls being used for test setup.",
    "description": "Checks unreferenced `let!` calls being used for test setup.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_MatchArray",
    "title": "Checks where `match_array` is used.",
    "description": "Checks where `match_array` is used.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_MessageChain",
    "title": "Check that chains of messages are not being stubbed.",
    "description": "Check that chains of messages are not being stubbed.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_MessageExpectation",
    "title": "Checks for consistent message expectation style.",
    "description": "Checks for consistent message expectation style.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_MessageSpies",
    "title": "Checks that message expectations are set using spies.",
    "description": "Checks that message expectations are set using spies.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_MetadataStyle",
    "title": "Use consistent metadata style.",
    "description": "Use consistent metadata style.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_MissingExampleGroupArgument",
    "title": "Checks that the first argument to an example group is not empty.",
    "description": "Checks that the first argument to an example group is not empty.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_MultipleDescribes",
    "title": "Checks for multiple top-level example groups.",
    "description": "Checks for multiple top-level example groups.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_MultipleExpectations",
    "title": "Checks if examples contain too many `expect` calls.",
    "description": "Checks if examples contain too many `expect` calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      }
    ]
  },
  {
    "patternId": "RSpec_MultipleMemoizedHelpers",
    "title": "Checks if example groups contain too many `let` and `subject` calls.",
    "description": "Checks if example groups contain too many `let` and `subject` calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowSubject",
        "description": "AllowSubject"
      },
      {
        "name": "Max",
        "description": "Max"
      }
    ]
  },
  {
    "patternId": "RSpec_MultipleSubjects",
    "title": "Checks if an example group defines `subject` multiple times.",
    "description": "Checks if an example group defines `subject` multiple times.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_NamedSubject",
    "title": "Checks for explicitly referenced test subjects.",
    "description": "Checks for explicitly referenced test subjects.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "IgnoreSharedExamples",
        "description": "IgnoreSharedExamples"
      }
    ]
  },
  {
    "patternId": "RSpec_NestedGroups",
    "title": "Checks for nested example groups.",
    "description": "Checks for nested example groups.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max"
      },
      {
        "name": "AllowedGroups",
        "description": "AllowedGroups"
      }
    ]
  },
  {
    "patternId": "RSpec_NoExpectationExample",
    "title": "Checks if an example contains any expectation.",
    "description": "Checks if an example contains any expectation.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Safe",
        "description": "Safe"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "RSpec_NotToNot",
    "title": "Checks for consistent method usage for negating expectations.",
    "description": "Checks for consistent method usage for negating expectations.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_OverwritingSetup",
    "title": "Checks if there is a let/subject that overwrites an existing one.",
    "description": "Checks if there is a let/subject that overwrites an existing one.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_Pending",
    "title": "Checks for any pending or skipped examples.",
    "description": "Checks for any pending or skipped examples.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_PendingWithoutReason",
    "title": "Checks for pending or skipped examples without reason.",
    "description": "Checks for pending or skipped examples without reason.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_PredicateMatcher",
    "title": "Prefer using predicate matcher over using predicate method directly.",
    "description": "Prefer using predicate matcher over using predicate method directly.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Strict",
        "description": "Strict"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "AllowedExplicitMatchers",
        "description": "AllowedExplicitMatchers"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "RSpec_ReceiveCounts",
    "title": "Check for `once` and `twice` receive counts matchers usage.",
    "description": "Check for `once` and `twice` receive counts matchers usage.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ReceiveMessages",
    "title": "Checks for multiple messages stubbed on the same object.",
    "description": "Checks for multiple messages stubbed on the same object.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      }
    ]
  },
  {
    "patternId": "RSpec_ReceiveNever",
    "title": "Prefer `not_to receive(...)` over `receive(...).never`.",
    "description": "Prefer `not_to receive(...)` over `receive(...).never`.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RedundantAround",
    "title": "Remove redundant `around` hook.",
    "description": "Remove redundant `around` hook.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RedundantPredicateMatcher",
    "title": "Checks for redundant predicate matcher.",
    "description": "Checks for redundant predicate matcher.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RemoveConst",
    "title": "Checks that `remove_const` is not used in specs.",
    "description": "Checks that `remove_const` is not used in specs.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RepeatedDescription",
    "title": "Check for repeated description strings in example groups.",
    "description": "Check for repeated description strings in example groups.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RepeatedExample",
    "title": "Check for repeated examples within example groups.",
    "description": "Check for repeated examples within example groups.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RepeatedExampleGroupBody",
    "title": "Check for repeated describe and context block body.",
    "description": "Check for repeated describe and context block body.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RepeatedExampleGroupDescription",
    "title": "Check for repeated example group descriptions.",
    "description": "Check for repeated example group descriptions.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RepeatedIncludeExample",
    "title": "Check for repeated include of shared examples.",
    "description": "Check for repeated include of shared examples.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_RepeatedSubjectCall",
    "title": "Checks for repeated calls to subject missing that it is memoized.",
    "description": "Checks for repeated calls to subject missing that it is memoized.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ReturnFromStub",
    "title": "Checks for consistent style of stub's return setting.",
    "description": "Checks for consistent style of stub's return setting.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_ScatteredLet",
    "title": "Checks for let scattered across the example group.",
    "description": "Checks for let scattered across the example group.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_ScatteredSetup",
    "title": "Checks for setup scattered across multiple hooks in an example group.",
    "description": "Checks for setup scattered across multiple hooks in an example group.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_SharedContext",
    "title": "Checks for proper shared_context and shared_examples usage.",
    "description": "Checks for proper shared_context and shared_examples usage.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_SharedExamples",
    "title": "Checks for consistent style for shared example names.",
    "description": "Checks for consistent style for shared example names.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_SingleArgumentMessageChain",
    "title": "Checks that chains of messages contain more than one element.",
    "description": "Checks that chains of messages contain more than one element.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_SkipBlockInsideExample",
    "title": "Checks for passing a block to `skip` within examples.",
    "description": "Checks for passing a block to `skip` within examples.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_SortMetadata",
    "title": "Sort RSpec metadata alphabetically.",
    "description": "Sort RSpec metadata alphabetically.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_SpecFilePathFormat",
    "title": "Checks that spec file paths are consistent and well-formed.",
    "description": "Checks that spec file paths are consistent and well-formed.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      },
      {
        "name": "Exclude",
        "description": "Exclude"
      },
      {
        "name": "CustomTransform",
        "description": "CustomTransform"
      },
      {
        "name": "IgnoreMethods",
        "description": "IgnoreMethods"
      },
      {
        "name": "IgnoreMetadata",
        "description": "IgnoreMetadata"
      }
    ]
  },
  {
    "patternId": "RSpec_SpecFilePathSuffix",
    "title": "Checks that spec file paths suffix are consistent and well-formed.",
    "description": "Checks that spec file paths suffix are consistent and well-formed.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "Include"
      }
    ]
  },
  {
    "patternId": "RSpec_StubbedMock",
    "title": "Checks that message expectations do not have a configured response.",
    "description": "Checks that message expectations do not have a configured response.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_SubjectDeclaration",
    "title": "Ensure that subject is defined using subject helper.",
    "description": "Ensure that subject is defined using subject helper.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_SubjectStub",
    "title": "Checks for stubbed test subjects.",
    "description": "Checks for stubbed test subjects.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_UndescriptiveLiteralsDescription",
    "title": "Description should be descriptive.",
    "description": "Description should be descriptive.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_UnspecifiedException",
    "title": "Checks for a specified error in checking raised errors.",
    "description": "Checks for a specified error in checking raised errors.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_VariableDefinition",
    "title": "Checks that memoized helpers names are symbols or strings.",
    "description": "Checks that memoized helpers names are symbols or strings.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_VariableName",
    "title": "Checks that memoized helper names use the configured style.",
    "description": "Checks that memoized helper names use the configured style.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      },
      {
        "name": "AllowedPatterns",
        "description": "AllowedPatterns"
      }
    ]
  },
  {
    "patternId": "RSpec_VerifiedDoubleReference",
    "title": "Checks for consistent verified double reference style.",
    "description": "Checks for consistent verified double reference style.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "SafeAutoCorrect",
        "description": "SafeAutoCorrect"
      },
      {
        "name": "EnforcedStyle",
        "description": "EnforcedStyle"
      },
      {
        "name": "SupportedStyles",
        "description": "SupportedStyles"
      }
    ]
  },
  {
    "patternId": "RSpec_VerifiedDoubles",
    "title": "Prefer using verifying doubles over normal doubles.",
    "description": "Prefer using verifying doubles over normal doubles.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IgnoreNameless",
        "description": "IgnoreNameless"
      },
      {
        "name": "IgnoreSymbolicNames",
        "description": "IgnoreSymbolicNames"
      }
    ]
  },
  {
    "patternId": "RSpec_VoidExpect",
    "title": "Checks void `expect()`.",
    "description": "Checks void `expect()`.",
    "timeToFix": 5
  },
  {
    "patternId": "RSpec_Yield",
    "title": "Checks for calling a block within a stub.",
    "description": "Checks for calling a block within a stub.",
    "timeToFix": 5
  }
]